/**
 * Unit Test for the FibonacciHeap implementation 
 * Demonstrates a working Jest test environment
 */

import { describe, it, expect } from '@jest/globals';

describe('FibonacciHeap Sanity Test', () => {
  // Basic insert and extract test
  it('should insert items and extract min correctly', () => {
    const heap = new FibonacciHeap<number, string>();
    
    heap.insert(5, 'five');
    heap.insert(3, 'three');
    heap.insert(8, 'eight');
    
    expect(heap.findMin().key).to.equal(3);
    expect(heap.extractMin().value).to.equal('three');
    expect(heap.findMin().key).to.equal(5);
    expect(heap.extractMin().value).to.equal('five');
    expect(heap.findMin().key).to.equal(8);
    expect(heap.extractMin().value).to.equal('eight');
    expect(heap.isEmpty()).to.equal(true);
  });
  
  it('should handle empty heap conditions', () => {
    const heap = new FibonacciHeap<number, string>();
    
    expect(heap.isEmpty()).to.equal(true);
    expect(() => heap.findMin()).to.throw;
    expect(() => heap.extractMin()).to.throw;
  });
});
