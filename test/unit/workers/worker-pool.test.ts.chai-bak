
describe('WorkerPool', () => {

// Mock worker_threads
jest.mock('worker_threads', () => {
  return {
    Worker: function() {
      return new (require('../../../test/mocks/workers/worker').MockWorker)();
    },
    isMainThread: true
  };
});

  let workerPool: WorkerPool;
  let tempDir: string;

  beforeAll(async () => {
    tempDir = await createTempTestDir('worker-pool-test');
  });

  afterAll(async () => {
    await removeTempTestDir(tempDir);
  });

  beforeEach(() => {
    (WorkerPool as any).instance = null;
    workerPool = WorkerPool.getInstance({
      minWorkers: 2,
      maxWorkers: 5,
      taskTimeout: 1000
    });
  });

  it('should start and stop successfully', async () => {
    workerPool.start();
    expect(workerPool.getWorkerCount()).to.equal(2);
    workerPool.stop();
    expect(workerPool.getWorkerCount()).to.equal(0);
  });

  // Additional tests...
});
