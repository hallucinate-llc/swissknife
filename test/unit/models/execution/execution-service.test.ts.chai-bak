/**
 * Unit tests for ModelExecutionService
 */

// Import test helpers

// Mock all required modules first
jest.mock('../../../../src/models/execution', () => ({
  ModelExecutionService: {
    getInstance: jest.fn().mockReturnValue({
      executeModel: jest.fn().mockResolvedValue({
        response: 'Mock response',
        usage: { promptTokens: 10, completionTokens: 20, totalTokens: 30 },
        timingMs: 100
      }),
      executeModelStream: jest.fn().mockImplementation(() => {
        const EventEmitter = require('events');
        const stream = new EventEmitter();
        
        setTimeout(() => {
          stream.emit('data', { text: 'Mock stream data' });
          stream.emit('end');
        }, 10);
        
        stream.pipe = () => stream;
        stream.removeListener = () => stream;
        stream.removeAllListeners = () => stream;
        
        return Promise.resolve(stream);
      }),
      getModelsByCapability: jest.fn().mockResolvedValue([
        { id: 'test-model', capabilities: { streaming: true }}
      ]),
      getDefaultModel: jest.fn().mockResolvedValue({ id: 'default-model' })
    })
  }
}));

// Import the mocked modules

// Mock the ModelRegistry
jest.mock('../../../../src/models/registry', () => {
  

  return {
    ModelRegistry: {
      getInstance: jest.fn().mockReturnValue({
        getModel: jest.fn().mockImplementation((modelId) => {
          // Find the model in fixtures
          for (const provider of fixtures.providers) {
            const model = provider.models.find((m) => m.id === modelId);
            if (model) return { ...model, provider: provider.id };
          }
          return undefined;
        }),
        getProvider: jest.fn().mockImplementation((providerId) => {
          return fixtures.providers.find((p) => p.id === providerId);
        }),
        getAllModels: jest.fn().mockReturnValue(
          fixtures.providers.flatMap((provider) => 
            provider.models.map((model) => ({ ...model, provider: provider.id }))
          )
        )
      })
    }
  };
});

// Mock the ConfigurationManager
const mockConfigManager = {
  get: jest.fn().mockImplementation((key, defaultValue) => {
    if (key === 'apiKeys.test-provider-1') return ['config-test-key-1'];
    if (key === 'apiKeys.test-provider-2') return ['config-test-key-2'];
    return defaultValue;
  })
};

jest.mock('../../../../src/config/manager', () => ({
  ConfigurationManager: {
    getInstance: jest.fn().mockReturnValue(mockConfigManager)
  }
}));

// Mock the IntegrationRegistry
const mockGooseBridge = createMockGooseBridge();

jest.mock('../../../../src/integration/registry', () => ({
  IntegrationRegistry: {
    getInstance: jest.fn().mockReturnValue({
      getBridge: jest.fn().mockReturnValue(mockGooseBridge),
      callBridge: jest.fn().mockImplementation(async (bridgeId, method, args) => {
        return mockGooseBridge.call(method, args);
      })
    })
  }
}));

describe('ModelExecutionService', () => {
  let modelExecutionService: ModelExecutionService;
  let modelRegistry: ModelRegistry;
  let configManager: ConfigurationManager;
  let integrationRegistry: IntegrationRegistry;
  let restoreEnv: () => void;
  
  const fixtures = generateModelFixtures();
  const promptFixtures = generatePromptFixtures();
  
  beforeAll(() => {
    // Set up environment variables
    restoreEnv = mockEnv({
      'TEST_PROVIDER_1_API_KEY': 'env-test-key-1',
      'TEST_PROVIDER_2_API_KEY': 'env-test-key-2'
    });
  });
  
  afterAll(() => {
    // Restore environment variables
    restoreEnv();
  });
  
  beforeEach(() => {
    // Reset the singleton
    (ModelExecutionService as any).instance = null;
    
    // Get instances
    modelExecutionService = ModelExecutionService.getInstance();
    modelRegistry = ModelRegistry.getInstance();
    configManager = ConfigurationManager.getInstance();
    integrationRegistry = IntegrationRegistry.getInstance();
    
    // Reset mocks
    jest.clearAllMocks();
  });
  
  describe('model execution', () => {
    it('should execute a current model', async () => {
      // Arrange
  const modelId = 'test-model-1'; // Current source model
  const prompt = promptFixtures.prompts[0].text;
      
  // Mock the execute method if it exists
  if ('executeCurrentModel' in modelExecutionService) {
        jest.spyOn(modelExecutionService as any, 'executeCurrentModel')
          .mockResolvedValue({
            response: `Current model response to: ${prompt}`,
            usage: {
              promptTokens: prompt.length / 4,
              completionTokens: 100,
              totalTokens: prompt.length / 4 + 100
            },
            timingMs: 500
          });
      }
      
      // Act
      const result = await modelExecutionService.executeModel(modelId, prompt);
      
      // Assert
      expect(result).toBeDefined();
      expect(result.response).toContain(prompt);
      expect(result.usage).toBeDefined();
      expect(result.usage.totalTokens).toBeGreaterThan(0);
      expect(result.timingMs).toBeGreaterThan(0);
      
      // Verify getModel was called with correct ID
      expect(modelRegistry.getModel).toHaveBeenCalledWith(modelId);
    });
    
    it('should execute a Goose model via bridge', async () => {
      // Arrange
      const modelId = 'test-model-3'; // Goose source model
      const prompt = promptFixtures.prompts[1].text;
      
      // Act
      const result = await modelExecutionService.executeModel(modelId, prompt);
      
      // Assert
      expect(result).toBeDefined();
      expect(result.response).toBeDefined();
      expect(result.usage).toBeDefined();
      
      // Check bridge interaction if appropriate method exists
      if (typeof (modelExecutionService as any).executeGooseModel === 'function') {
        expect(integrationRegistry.getBridge).toHaveBeenCalled();
        expect(integrationRegistry.callBridge).toHaveBeenCalledWith(
          expect.any(String),
          'generate_completion',
          expect.objectContaining({
            model: modelId,
            prompt
          })
        );
      }
    });
    
    it('should throw error for non-existent model', async () => {
      // Arrange
      const modelId = 'non-existent-model';
      const prompt = 'Test prompt';
      
      // Mock getModel to return undefined
      modelRegistry.getModel.mockReturnValueOnce(undefined);
      
      // Act & Assert
      await expect(modelExecutionService.executeModel(modelId, prompt))
        .rejects.toThrow('Model not found');
    });
    
    it('should throw error for non-existent provider', async () => {
      // Arrange
      const modelId = 'test-model-with-bad-provider';
      const prompt = 'Test prompt';
      
      // Mock getModel and getProvider
      modelRegistry.getModel.mockReturnValueOnce({ 
        id: modelId,
        provider: 'non-existent-provider'
      });
      modelRegistry.getProvider.mockReturnValueOnce(undefined);
      
      // Act & Assert
      await expect(modelExecutionService.executeModel(modelId, prompt))
        .rejects.toThrow('Provider not found');
    });
    
    it('should handle execution options', async () => {
      // Arrange
      const modelId = 'test-model-1';
      const prompt = promptFixtures.prompts[0].text;
      const options = {
        temperature: 0.7,
        maxTokens: 500,
        topP: 0.9,
        stream: false
      };
      
      // Mock execute method with options capture
      let capturedOptions: any;
      
      if (typeof (modelExecutionService as any).executeCurrentModel === 'function') {
        jest.spyOn(modelExecutionService as any, 'executeCurrentModel')
          .mockImplementation(async (model, provider, prompt, apiKey, opts) => {
            capturedOptions = opts;
            return {
              response: `Response with options`,
              usage: { promptTokens: 10, completionTokens: 20, totalTokens: 30 },
              timingMs: 100
            };
          });
      }
      
      // Act
      const result = await modelExecutionService.executeModel(modelId, prompt, options);
      
      // Assert
      expect(result).toBeDefined();
      
      // If options were captured, verify them
      if (capturedOptions) {
        expect(capturedOptions.temperature).toBe(options.temperature);
        expect(capturedOptions.maxTokens).toBe(options.maxTokens);
        expect(capturedOptions.topP).toBe(options.topP);
        expect(capturedOptions.stream).toBe(options.stream);
      }
    });
  });
  
  describe('API key management', () => {
    it('should use API key from configuration', async () => {
      // Arrange
      const modelId = 'test-model-1';
      const prompt = 'Test prompt';
      
      // Mock getApiKey method if it exists
      let capturedProvider: string | undefined;
      
      if (typeof (modelExecutionService as any).getApiKey === 'function') {
        jest.spyOn(modelExecutionService as any, 'getApiKey')
          .mockImplementation((provider) => {
            capturedProvider = provider.id;
            return `config-${provider.id}-key`;
          });
      }
      
      // Act
      await modelExecutionService.executeModel(modelId, prompt);
      
      // Assert - if getApiKey was called
      if (capturedProvider) {
        expect(capturedProvider).toBe('test-provider-1');
      }
      
      // Check config.get was called for API keys
      expect(configManager.get).toHaveBeenCalledWith(
        expect.stringContaining('apiKeys'),
        expect.anything()
      );
    });
    
    it('should use API key from environment variable', async () => {
      // Arrange
      const modelId = 'test-model-1';
      const prompt = 'Test prompt';
      
      // Mock config.get to return empty array (no stored keys)
      configManager.get.mockReturnValueOnce([]);
      
      // Mock getApiKey method if it exists
      if (typeof (modelExecutionService as any).getApiKey === 'function') {
        const getApiKeySpy = jest.spyOn(modelExecutionService as any, 'getApiKey');
        
        // Act
        await modelExecutionService.executeModel(modelId, prompt);
        
        // Assert - should use environment variable
        if (getApiKeySpy.mock.results[0]) {
          const apiKey = getApiKeySpy.mock.results[0].value;
          expect(apiKey).toBe('env-test-key-1');
        }
      } else {
        // Skip assertion if method doesn't exist
        await modelExecutionService.executeModel(modelId, prompt);
      }
    });
    
    it('should throw error when no API key is available', async () => {
      // Arrange
      const modelId = 'test-model-1';
      const prompt = 'Test prompt';
      
      // Mock to simulate no API keys available
      configManager.get.mockReturnValue([]);
      
      // Mock environment check
      restoreEnv();
      const tempRestore = mockEnv({
        'TEST_PROVIDER_1_API_KEY': undefined
      });
      
      // If getApiKey exists, mock it to simulate error
      if (typeof (modelExecutionService as any).getApiKey === 'function') {
        jest.spyOn(modelExecutionService as any, 'getApiKey')
          .mockImplementation(() => {
            throw new Error('No API key found');
          });
      }
      
      // Act & Assert
      try {
        await expect(modelExecutionService.executeModel(modelId, prompt))
          .rejects.toThrow(/api key|API key/i);
      } finally {
        // Restore environment
        tempRestore();
        
        // Restore original mock environment
        restoreEnv = mockEnv({
          'TEST_PROVIDER_1_API_KEY': 'env-test-key-1',
          'TEST_PROVIDER_2_API_KEY': 'env-test-key-2'
        });
      }
    });
  });
  
  describe('model source handling', () => {
    it('should detect and use the correct execution method based on model source', async () => {
      // Test is only relevant if these methods exist
      const hasSourceMethods = 
        typeof (modelExecutionService as any).executeCurrentModel === 'function' &&
        typeof (modelExecutionService as any).executeGooseModel === 'function';
      
      if (!hasSourceMethods) {
        console.log('Skipping source method test - methods not available');
        return;
      }
      
      // Create spies
      const currentSpy = jest.spyOn(modelExecutionService as any, 'executeCurrentModel')
        .mockResolvedValue({
          response: 'Current model response',
          usage: { promptTokens: 10, completionTokens: 20, totalTokens: 30 },
          timingMs: 100
        });
      
      const gooseSpy = jest.spyOn(modelExecutionService as any, 'executeGooseModel')
        .mockResolvedValue({
          response: 'Goose model response',
          usage: { promptTokens: 10, completionTokens: 20, totalTokens: 30 },
          timingMs: 100
        });
      
      // Test current source model
      modelRegistry.getModel.mockImplementation((modelId: string) => {
        if (modelId === 'current-model') {
          return { id: 'current-model', provider: 'test-provider-1', source: 'current' } as any;
        }
        if (modelId === 'goose-model') {
          return { id: 'goose-model', provider: 'test-provider-2', source: 'goose' } as any;
        }
        return undefined;
      });
      
      // Act - Execute current source model
      await modelExecutionService.executeModel('current-model' as any, 'Test prompt');
      
      // Assert
      expect(currentSpy).toHaveBeenCalled();
      expect(gooseSpy).not.toHaveBeenCalled();
      
      // Reset spies
      currentSpy.mockClear();
      gooseSpy.mockClear();
      // Act - Execute goose source model
      await modelExecutionService.executeModel('goose-model' as any, 'Test prompt' as any);
      
      // Assert
      expect(currentSpy).not.toHaveBeenCalled();
      expect(gooseSpy).toHaveBeenCalled();
      
      // Clean up
      currentSpy.mockRestore();
      gooseSpy.mockRestore();
    });
    
    it('should throw error for unsupported model source', async () => {
      // Arrange
      const modelId = 'unsupported-model';
      const prompt = 'Test prompt';
      
      // Mock getModel to return model with unsupported source
      modelRegistry.getModel.mockReturnValueOnce({
        id: modelId,
        provider: 'test-provider-1',
        source: 'unsupported_source'
      } as any);
      
      // Make sure getProvider returns a provider
      modelRegistry.getProvider.mockReturnValueOnce({
        id: 'test-provider-1',
        name: 'Test Provider 1'
      });
      
      // Act & Assert
      await expect(modelExecutionService.executeModel(modelId as any, prompt))
        .rejects.toThrow(/unsupported|not supported|invalid/i);
    });
  });
  
  describe('streaming support', () => {
    it('should support streaming mode if implemented', async () => {
      // Skip if streaming is not implemented
      if (typeof modelExecutionService.executeModelStream !== 'function') {
        console.log('Skipping streaming test - method not implemented');
        return;
      }
      
      // Arrange
      const modelId = 'test-model-1';
      const prompt = promptFixtures.prompts[0].text;
      
      // Mock streaming function
      const mockStream = {
        on: jest.fn().mockImplementation(function(event, handler) {
          if (event === 'data') {
            // Simulate data events
            handler({ text: 'Stream' });
            handler({ text: ' response' });
            handler({ text: ' chunk' });
          }
          if (event === 'end') {
            // Simulate end event
            handler();
          }
          return this;
        }),
        pipe: jest.fn().mockReturnThis(),
        removeListener: jest.fn().mockReturnThis(),
        removeAllListeners: jest.fn().mockReturnThis()
      };
      
      // If there's an executeCurrentModelStream method, mock it
      if (typeof (modelExecutionService as any).executeCurrentModelStream === 'function') {
        jest.spyOn(modelExecutionService as any, 'executeCurrentModelStream')
          .mockReturnValue(mockStream);
      }
      
      // Act
      const stream = await modelExecutionService.executeModelStream(modelId, prompt);
      
      // Assert
      expect(stream).toBeDefined();
      expect(stream.on).toBeDefined();
      
      // Set up mock data collector
      const dataCollector: string[] = [];
      let endCalled = false;
      
      stream.on('data', (chunk: any) => {
        dataCollector.push(chunk.text);
      });
      
      stream.on('end', () => {
        endCalled = true;
      });
      
      // Simulate events being processed
      await new Promise(resolve => setTimeout(resolve, 10));
      
      // Verify data was received
      expect(dataCollector.join('')).to.equal('Stream response chunk');
      expect(endCalled).toBe(true);
    });
  });
  
  describe('utility methods', () => {
    it('should provide model selection by capability if implemented', async () => {
      // Skip if method doesn't exist
      if (typeof modelExecutionService.getModelsByCapability !== 'function') {
        console.log('Skipping capability test - method not implemented');
        return;
      }
      
      // Arrange
      // Models are already mocked from fixtures
      
      // Act
      const streamingModels = await modelExecutionService.getModelsByCapability('streaming');
      const imageModels = await modelExecutionService.getModelsByCapability('images');
      
      // Assert
      expect(streamingModels.length).toBeGreaterThan(0);
      expect(streamingModels.every((m: any) => m.capabilities.streaming)).to.equal(true);
      
      if (imageModels.length > 0) {
        expect(imageModels.every((m: any) => m.capabilities.images)).to.equal(true);
      }
    });
    
    it('should provide default model selection if implemented', async () => {
      // Skip if method doesn't exist
      if (typeof modelExecutionService.getDefaultModel !== 'function') {
        console.log('Skipping default model test - method not implemented');
        return;
      }
      
      // Arrange - Mock config to return default model
      configManager.get.mockImplementation((key, defaultValue) => {
        if (key === 'models.default') return 'test-model-1';
        return defaultValue;
      });
      
      // Act
      const defaultModel = await modelExecutionService.getDefaultModel();
      
      // Assert
      expect(defaultModel).toBeDefined();
      expect(defaultModel.id).toBe('test-model-1');
    });
  });
  
  describe('performance monitoring', () => {
    it('should track execution timing', async () => {
      // Arrange
      const modelId = 'test-model-1';
      const prompt = promptFixtures.prompts[0].text;
      
      // Act
      const result = await modelExecutionService.executeModel(modelId, prompt);
      
      // Assert
      expect(result.timingMs).toBeDefined();
      expect(typeof result.timingMs).toBe('number');
      expect(result.timingMs).toBeGreaterThan(0);
    });
    
    it('should track token usage', async () => {
      // Arrange
      const modelId = 'test-model-1';
      const prompt = promptFixtures.prompts[0].text;
      
      // Act
      const result = await modelExecutionService.executeModel(modelId, prompt);
      
      // Assert
      expect(result.usage).toBeDefined();
      expect(result.usage.promptTokens).toBeDefined();
      expect(result.usage.completionTokens).toBeDefined();
      expect(result.usage.totalTokens).toBeDefined();
      
      // Token counts should be positive numbers
      expect(result.usage.promptTokens).toBeGreaterThan(0);
      expect(result.usage.completionTokens).toBeGreaterThan(0);
      expect(result.usage.totalTokens).toBeGreaterThan(0);
      
      // Total should equal prompt + completion
      expect(result.usage.totalTokens).toBe(
        result.usage.promptTokens + result.usage.completionTokens
      );
    });
  });
});
