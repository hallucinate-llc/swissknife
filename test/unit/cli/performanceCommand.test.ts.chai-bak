/**
 * Unit tests for performance CLI command
 */


// Mock dependencies
jest.mock('../../../src/performance/optimizer');
jest.mock('../../../src/tasks/manager');
jest.mock('../../../src/ipfs/client');
jest.mock('../../../src/ai/agent/agent');
jest.mock('../../../src/ai/models/model');

describe('Performance Command', () => {
  let mockOptimizer: jest.Mocked<PerformanceOptimizer>;
  
  beforeEach(() => {
    // Reset mocks
    jest.clearAllMocks();
    
    // Setup mock implementations
    (Model as jest.Mock).mockImplementation(() => ({}));
    (Agent as jest.Mock).mockImplementation(() => ({}));
    (TaskManager as jest.Mock).mockImplementation(() => ({}));
    (IPFSKitClient as jest.Mock).mockImplementation(() => ({}));
    
    // Setup mock PerformanceOptimizer
    mockOptimizer = {
      optimize: jest.fn().mockResolvedValue(undefined)
    } as unknown as jest.Mocked<PerformanceOptimizer>;
    
    (PerformanceOptimizer as jest.Mock).mockImplementation(() => mockOptimizer);
  });
  
  it('should create dependencies and run optimize when executed', async () => {
    // Arrange
    const action = performanceCommand.action as (options: any) => Promise<void>;
    
    // Act
    await action({});
    
    // Assert
    expect(Model).toHaveBeenCalled();
    expect(Agent).toHaveBeenCalled();
    expect(TaskManager).toHaveBeenCalled();
    expect(IPFSKitClient).toHaveBeenCalled();
    expect(PerformanceOptimizer).toHaveBeenCalled();
    expect(mockOptimizer.optimize).toHaveBeenCalled();
  });
  
  it('should have the correct command name and description', () => {
    // Assert
    expect(performanceCommand.name()).to.equal('performance');
    expect(performanceCommand.description()).to.equal('Run performance optimization tasks');
  });
});
