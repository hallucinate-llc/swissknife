/**
 * Standalone logging test
 */

// Simple logging manager class
class LogManager {
  constructor() {
    this.loggers = new Map();
    this.defaultLevel = 'info';
    this.levels = ['debug', 'info', 'warn', 'error'];
  }

  static getInstance() {
    if (!LogManager.instance) {
      LogManager.instance = new LogManager();
    }
    return LogManager.instance;
  }

  getLogger(name) {
    if (!this.loggers.has(name)) {
      this.loggers.set(name, this.createLogger(name));
    }
    return this.loggers.get(name);
  }
  
  setDefaultLevel(level) {
    if (!this.levels.includes(level)) {
      throw new Error(`Invalid log level: ${level}`);
    }
    this.defaultLevel = level;
  }

  createLogger(name) {
    const logger = {};
    
    this.levels.forEach(level => {
      logger[level] = jest.fn(message => {
        return { level, message, name };
      });
    });
    
    return logger;
  }
}

// Tests
describe('Logging System', () => {
  let logManager;
  
  beforeEach(() => {
    LogManager.instance = undefined;
    logManager = LogManager.getInstance();
  });
  
  describe('LogManager', () => {
    it('should be a singleton', () => {
      // Act
      const instance1 = LogManager.getInstance();
      const instance2 = LogManager.getInstance();
      
      // Assert
      expect(instance1).toBe(instance2);
    });
    
    it('should create and return loggers', () => {
      // Act
      const logger1 = logManager.getLogger('test');
      const logger2 = logManager.getLogger('test');
      
      // Assert
      expect(logger1).toBeDefined();
      expect(logger2).toBeDefined();
      expect(logger1).toBe(logger2);
    });
    
    it('should create different loggers for different names', () => {
      // Act
      const logger1 = logManager.getLogger('test1');
      const logger2 = logManager.getLogger('test2');
      
      // Assert
      expect(logger1).not.toBe(logger2);
    });
    
    it('should set default log level', () => {
      // Act
      logManager.setDefaultLevel('debug');
      
      // Assert
      expect(logManager.defaultLevel).toBe('debug');
    });
    
    it('should throw error for invalid log level', () => {
      // Act & Assert
      expect(() => {
        logManager.setDefaultLevel('invalid');
      }).toThrow('Invalid log level: invalid');
    });
  });
  
  describe('Logger', () => {
    it('should have methods for all log levels', () => {
      // Act
      const logger = logManager.getLogger('test');
      
      // Assert
      expect(logger.debug).toBeDefined();
      expect(logger.info).toBeDefined();
      expect(logger.warn).toBeDefined();
      expect(logger.error).toBeDefined();
      expect(typeof logger.debug).toBe('function');
    });
    
    it('should log messages correctly', () => {
      // Arrange
      const logger = logManager.getLogger('test');
      
      // Act
      const result = logger.info('Test message');
      
      // Assert
      expect(result).toEqual({
        level: 'info',
        message: 'Test message',
        name: 'test'
      });
      expect(logger.info).toHaveBeenCalledWith('Test message');
    });
  });
});
