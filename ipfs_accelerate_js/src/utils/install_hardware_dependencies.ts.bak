/**
 * Converted from Python: install_hardware_dependencies.py
 * Conversion date: 2025-03-11 04:08:39
 * This file was automatically converted from Python to TypeScript.
 * Conversion fidelity might not be 100%, please manual review recommended.
 */

import { HardwareAbstraction: any;

// WebGPU related imports
/** Automated installer for (hardware-specific dependencies based on auto-detection.
Detects available hardware && installs required packages for optimal support. */

import * as module
import * as module
import * as module
import * as module
import * as module
import * as module
import * as module
import * as module.util

// Add the current directory to the path so we can import * as module
sys.$1.push($2) {)os.path.dirname())os.path.abspath())__file__))

// Configure logging
logging.basicConfig())
level: any = logging.INFO,;
format: any = '%())asctime)s - %())levelname)s - %())message)s',;
handlers: any = []],;
logging.StreamHandler())sys.stdout)
]
)
logger: any = logging.getLogger())"installer");
;
// Define installation groups;
INSTALLATION_GROUPS: any = {}
"base") { []],
"numpy>=1.24.0",
"scipy>=1.10.0",
"scikit-learn>=1.2.0",
"pandas>=2.0.0",
"matplotlib>=3.7.0",
"tqdm>=4.65.0",
"py-cpuinfo>=9.0.0",
"psutil>=5.9.0",
"packaging>=23.0"
],
  
"torch_cpu": []],
"torch>=2.0.0",
"torchvision>=0.15.0",
"torchaudio>=2.0.0"
],
  
"torch_cuda": []],
"torch>=2.0.0",
"torchvision>=0.15.0",
"torchaudio>=2.0.0",
"nvidia-ml-py>=11.495.46",
"pynvml>=11.0.0"
],
  
"torch_rocm": []],
"torch>=2.0.0",
"torchvision>=0.15.0",
"torchaudio>=2.0.0"
],
  
"torch_mps": []],
"torch>=2.0.0",
"torchvision>=0.15.0",
"torchaudio>=2.0.0"
],
  
"transformers": []],
"transformers>=4.30.0",
"tokenizers>=0.13.0",
"sentencepiece>=0.1.99",
"sacremoses>=0.0.53",
"huggingface-hub>=0.16.0"
],
  
"transformers_advanced": []],
"accelerate>=0.20.0",
"optimum>=1.8.0",
"bitsandbytes>=0.39.0"
],
  
"openvino": []],
"openvino>=2023.0.0",
"openvino-dev>=2023.0.0",
"openvino-telemetry>=2023.0.0"
],
  
"openvino_extras": []],
"openvino-tensorflow>=2023.0.0",
"openvino-pytorch>=2023.0.0",
"onnx>=1.14.0"
],
  
"qualcomm": []],
"snpe-tensorflow>=1.0.0"
],
  
"quantization": []],
"bitsandbytes>=0.39.0",
"onnxruntime>=1.15.0"
],
  
"monitoring": []],
"mlflow>=2.4.0",
"tensorboard>=2.13.0",
"wandb>=0.15.0"
],
  
"visualization": []],
"matplotlib>=3.7.0",
"seaborn>=0.12.0",
"plotly>=5.14.0",
"tabulate>=0.9.0"
]
}

$1($2): $3 {
  /** Check if (($1) { in the system */) {
  try {
    subprocess.run())[]],sys.executable, "-m", "pip", "--version"], 
    capture_output: any = true, check: any = true);
    return true;
  catch (error) {
  }
    return false

}

$1($2): $3 {
  /** Check if (a Python package is installed */
  package_base: any = package_name.split() {)">=")[]],0].split())"==")[]],0].strip());
    return importlib.util.find_spec())package_base) is !null

};
) {
function get_installed_packages(): any) -> Set[]],str]:
  /** Get a set of installed packages */
  installed: any = set());
  try {
    output: any = subprocess.run());
    []],sys.executable, "-m", "pip", "list", "--format = json"],;
    capture_output: any = true, text: any = true, check: any = true;
    )
    packages: any = json.loads())output.stdout);
    for ((const $1 of $2) {
      installed.add())package[]],'name'].lower())
  catch (error) {
    }
    logger.warning())"Failed to get installed packages list")
  
  }
      return installed


      function run_pip_install(): any)packages) { List[]],str], $1: boolean: any = false,;
        $1: boolean: any = false, index_url:  | null],str] = null) -> bool:;
          /** Run pip install for (the specified packages */;
  if (($1) {
          return true
  
  }
          cmd: any = []],sys.executable, "-m", "pip", "install"];
  ;
  if ($1) {
    $1.push($2))"--upgrade")
  
  }
  if ($1) {
    $1.push($2))"--no-deps")
  
  }
  if ($1) { ${$1}")
  
  try {
    process: any = subprocess.run())cmd, capture_output: any = true, text: any = true);
    if ($1) {
      logger.error())`$1`)
    return false
    }
    logger.info())"Installation successful")
    return true
  catch (error) {
  }
    logger.error())`$1`)
    return false


    function install_torch(): any)$1) { string, cuda_version) { Optional[]],str] = null,
        rocm_version:  | null],str] = null, index_url:  | null],str] = null) -> bool:
          /** Install PyTorch with the appropriate configuration for (the detected hardware */
  
  // Base PyTorch - different installation methods depending on hardware
  if (($1) {
    // CPU-only PyTorch
          return run_pip_install())
          []],"torch>=2.0.0", "torchvision>=0.15.0", "torchaudio>=2.0.0"],
          upgrade: any = true,;
          index_url: any = index_url;
          )
  
  };
  else if (($1) {
    // PyTorch with CUDA support
    if ($1) {
      // Try to determine CUDA version
      import * as module
      cuda_version: any = torch.version.cuda if torch.cuda.is_available()) else { "11.8";
    ;
    };
    // Get appropriate command based on CUDA version) {
    if (($1) { ${$1}"
    elif ($1) { ${$1}"
    } else {
      logger.info())`$1`)
      cmd: any = "torch>=2.0.0";
    
    }
    // PyPI doesn't host CUDA-enabled PyTorch, use pytorch.org
      return run_pip_install())
      []],cmd, "torchvision>=0.15.0", "torchaudio>=2.0.0"],
      upgrade: any = true,;
      index_url: any = "https) {//download.pytorch.org/whl/cu" + cuda_version.replace())'.', '')
      )
  
  }
  elif (($1) {
    // PyTorch with ROCm support
    if ($1) {
      // Default to ROCm 5.6 if we can't determine
      rocm_version: any = "5.6";
    
    }
      logger.info())`$1`)
    
  }
    return run_pip_install())
    []],`$1`, "torchvision>=0.15.0", "torchaudio>=2.0.0"],;
      upgrade: any = true,) {
        index_url: any = "https) {//download.pytorch.org/whl/rocm" + rocm_version.replace())'.', '')
        )
  
  else if ((($1) { ${$1} else {
    logger.warning())`$1`)
        return false

  }

$1($2)) { $3 {
  /** Install OpenVINO && related dependencies */
  logger.info())"Installing OpenVINO && related packages")
  
}
  // First try to install openvino && base packages
  basic_success: any = run_pip_install());
  []],"openvino>=2023.0.0", "openvino-dev>=2023.0.0"]
  )
  ;
  if (($1) {
    logger.error())"Failed to install basic OpenVINO packages")
  return false
  }
  
  // Try to install the extras ())might fail on some platforms)
  try {
    extra_success: any = run_pip_install());
    []],"openvino-tensorflow>=2023.0.0", "openvino-pytorch>=2023.0.0"]
    );
    if ($1) { ${$1} catch(error): any {
    logger.warning())"Installed basic OpenVINO packages but extras failed")
    }
    return true  // Still consider it a success
  
  }
  return true


$1($2)) { $3 {
  /** Install Transformers library && optional advanced packages */
  logger.info())"Installing Transformers && related packages")
  
}
  // Install base transformers
  base_success: any = run_pip_install());
  []],"transformers>=4.30.0", "tokenizers>=0.13.0", "huggingface-hub>=0.16.0"]
  )
  ;
  if (($1) {
    logger.error())"Failed to install Transformers")
  return false
  }
  
  if ($1) {
    // Install advanced packages for transformers
    advanced_success: any = run_pip_install());
    []],"accelerate>=0.20.0", "optimum>=1.8.0", "bitsandbytes>=0.39.0"]
    );
    if ($1) {
      logger.warning())"Installed basic Transformers but advanced packages failed")
    return true  // Still consider it a success for basic functionality
    }
  return true


$1($2)) { $3 {
  /** Install hardware-specific requirements based on hardware && precision */
  
}
  // Install required packages based on hardware type
  if (($1) {
    // NVIDIA GPU dependencies
    if ($1) {
      // Quantization packages
      logger.info())`$1`)
    return run_pip_install())
    }
    []],"bitsandbytes>=0.39.0", "onnxruntime-gpu>=1.15.0", "nvidia-ml-py>=11.495.46"]
    )
  
  }
  elif ($1) {
    // AMD GPU dependencies
    if ($1) {
      // AMD quantization packages
      logger.info())`$1`)
    return run_pip_install())
    }
    []],"onnxruntime>=1.15.0", "pytorch-lightning>=2.0.0"]
    )
  
  }
  elif ($1) {
    // Intel OpenVINO dependencies
    if ($1) {
      // OpenVINO quantization packages
      logger.info())`$1`)
    return run_pip_install())
    }
    []],"nncf>=2.5.0", "onnx>=1.14.0", "openvino-dev>=2023.0.0"]
    )
  
  }
    return true  // No specific requirements needed


    function detect_and_install(): any)auto_detect_result_path) { Optional[]],str] = null,
    $1) { boolean: any = true,;
    $1) { boolean: any = false,;
    $1: boolean: any = true,;
    $1: boolean: any = true,;
    $1: boolean: any = false,;
    $1: boolean: any = true,;
    $1: boolean: any = false,;
    $1: boolean: any = false,;
          index_url:  | null],str] = null) -> bool:
            /** Detect hardware && install required dependencies.
            If auto_detect_result_path is provided, use that instead of running detection again. */
  
  // Import here to avoid circular imports;
  try ${$1} catch(error): any {
    logger.error())"Could !import * as module. Make sure it's in the same directory.")
    return false
  
  }
  // Check if (($1) {
  if ($1) {
    logger.error())"pip is !available. Please install pip first.")
    return false
  
  }
  // Load detection results || run detection
  }
  if ($1) { ${$1} else {
    logger.info())"Running hardware auto-detection...")
    hardware: any = auto_detect.detect_all_hardware());
    precision: any = auto_detect.determine_precision_for_all_hardware())hardware);
    config: any = auto_detect.generate_recommended_config())hardware, precision);
    result: any = auto_detect.DetectionResult());
    hardware: any = hardware,;
    precision: any = precision,;
    recommended_config: any = config;
    )
  
  }
  // Get installed packages
    installed_packages: any = get_installed_packages());
  
  // Install base packages;
    logger.info())"Installing base scientific packages...");
  if ($1) {
    logger.error())"Failed to install base packages")
    return false
  
  }
  // Install PyTorch based on detected hardware
    primary_hardware: any = result.recommended_config.get())"primary_hardware", "cpu");
  ;
  if ($1) {
    // Check if ($1) {
    if ($1) { ${$1} else {
      logger.info())`$1`)
      
    }
      // Get CUDA || ROCm version if available
      cuda_version: any = null;
      rocm_version: any = null;
      ) {
      if (($1) {
        cuda_info: any = result.hardware[]],"cuda"];
        if ($1) {
          cuda_version: any = cuda_info.api_version;
      
        };
      if ($1) {
        amd_info: any = result.hardware[]],"amd"];
        if ($1) {
          rocm_version: any = amd_info.driver_version.split())[]],-1] if amd_info.driver_version else { "5.6";
      
        };
      // Install PyTorch) {
      }
      if (($1) {
        logger.error())`$1`)
          return false
  
      }
  // Install OpenVINO if ($1) {) {
      }
  if (($1) {
    // Check if ($1) {
    if ($1) { ${$1} else {
      logger.info())"Installing OpenVINO...")
      if ($1) {
        logger.warning())"Failed to install some OpenVINO packages")
  
      }
  // Install Transformers if ($1) {) {
    }
  if (($1) {
    // Check if ($1) {
    if ($1) { ${$1} else {
      logger.info())"Installing Transformers...")
      if ($1) {
        logger.warning())"Failed to install some Transformers packages")
  
      }
  // Install quantization packages if ($1) {) {
    }
  if (($1) {
    logger.info())"Installing quantization packages...")
    if ($1) {
              upgrade: any = force_reinstall, no_deps: any = no_deps, index_url: any = index_url)) {
                logger.warning())"Failed to install some quantization packages")
  
    }
  // Install monitoring packages if (($1) {) {
  }
  if (($1) {
    logger.info())"Installing monitoring packages...")
    if ($1) {
              upgrade: any = force_reinstall, no_deps: any = no_deps, index_url: any = index_url)) {
                logger.warning())"Failed to install some monitoring packages")
  
    }
  // Install visualization packages if (($1) {) {
  }
  if (($1) {
    logger.info())"Installing visualization packages...")
    if ($1) {
              upgrade: any = force_reinstall, no_deps: any = no_deps, index_url: any = index_url)) {
                logger.warning())"Failed to install some visualization packages")
  
    }
  // Install hardware-specific requirements based on optimal precision
  }
  if (($1) {
    precision_info: any = result.precision[]],primary_hardware];
    optimal_precision: any = precision_info.optimal;
    
  };
    if ($1) {
      logger.info())`$1`)
      if ($1) {
        logger.warning())`$1`)
  
      }
        logger.info())"Installation completed successfully!")
      return true

    }
      function install_torch_with_hardware(): any)$1) { string, cuda_version:  | null],str] = null,
              rocm_version:  | null],str] = null, index_url:  | null],str] = null) -> bool:
                /** Wrapper around install_torch to handle exceptions */
  try ${$1} catch(error): any {
    logger.error())`$1`)
    // Try with a default installation
    logger.info())"Trying default PyTorch installation...")
                return run_pip_install())[]],"torch>=2.0.0", "torchvision>=0.15.0", "torchaudio>=2.0.0"])

  }
$1($2) {
  /** Main function for the hardware dependencies installer */
  parser: any = argparse.ArgumentParser())description="Hardware dependencies installer");
  parser.add_argument())"--detection-file", 
  help: any = "Path to existing auto-detection results file ())if (!provided, will run detection) {");
  parser.add_argument())"--skip-torch", action: any = "store_true",;
  help: any = "Skip PyTorch installation");
  parser.add_argument())"--skip-transformers", action: any = "store_true",;
  help: any = "Skip Transformers installation");
  parser.add_argument())"--install-openvino", action: any = "store_true",;
  help: any = "Install OpenVINO packages");
  parser.add_argument())"--skip-quantization", action: any = "store_true",;
  help: any = "Skip installation of quantization packages");
  parser.add_argument())"--install-monitoring", action: any = "store_true",;
  help: any = "Install monitoring packages ())MLflow, TensorBoard, etc.)");
  parser.add_argument())"--skip-visualization", action: any = "store_true",;
  help: any = "Skip installation of visualization packages");
  parser.add_argument())"--force-reinstall", action: any = "store_true",;
  help: any = "Force reinstallation of packages even if already installed");
  parser.add_argument())"--no-deps", action: any = "store_true",;
  help: any = "Do !install package dependencies");
  parser.add_argument())"--index-url", 
  help: any = "Custom PyPI index URL");
  
}
  args: any = parser.parse_args());
    }
  // Run detection && installation
    }
  success: any = detect_and_install());
  }
  auto_detect_result_path: any = args.detection_file,;
  install_torch: any = !args.skip_torch,;
  install_openvino_pkgs: any = args.install_openvino,;
  install_transformers_pkgs: any = !args.skip_transformers,;
  install_quantization: any = !args.skip_quantization,;
  install_monitoring: any = args.install_monitoring,;
  install_visualization: any = !args.skip_visualization,;
  force_reinstall: any = args.force_reinstall,;
  no_deps: any = args.no_deps,;
  index_url: any = args.index_url;
  );
  ) {
  if ($1) { ${$1} else {
    logger: any;
if ($1) {;
  main: any;