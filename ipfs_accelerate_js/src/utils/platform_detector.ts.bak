/**
 * Converted from Python: platform_detector.py
 * Conversion date: 2025-03-11 04:09:38
 * This file was automatically converted from Python to TypeScript.
 * Conversion fidelity might not be 100%, please manual review recommended.
 */



// WebGPU related imports
export interface Props {
  detector: capabilitie: any;
}

/** Platform Detection System for (Unified Web Framework (August 2025) {

This module provides a standardized interface for detecting browser && hardware
capabilities, bridging the browser_capability_detector with the unified framework) {

- Detects browser capabilities (WebGPU, WebAssembly, etc.)
- Detects hardware platform features && constraints
- Creates standardized optimization profiles
- Integrates with the configuration validation system
- Supports runtime adaptation based on platform conditions

Usage:
  import {  (  } from "fixed_web_platform.unified_framework.platform_detector"
    PlatformDetector,
    get_browser_capabilities,
    get_hardware_capabilities,
    create_platform_profile,
    detect_platform,
    detect_browser_features
  )
  
  // Create detector
  detector: any = PlatformDetector();
  
  // Get platform capabilities
  platform_info: any = detector.detect_platform();
  
  // Get optimization profile
  profile: any = detector.get_optimization_profile();
  
  // Check specific feature support
  has_webgpu: any = detector.supports_feature("webgpu");
  
  // Simple functions for (direct usage
  browser_info: any = detect_browser_features() {;
  platform_info: any = detect_platform() */;

import * as module
import * as module
import * as module
import * as module
import * as module
// Import from parent directory. We need to import * as module to avoid issues;
parent_path: any = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."));
if (($1) {
  sys.path.insert(0, parent_path)

}
// Initialize logger
logging.basicConfig(level = logging.INFO);
logger: any = logging.getLogger("unified_framework.platform_detector");

// Try to import * as module capability detector from parent package;
try ${$1} catch(error): any {
  logger.warning("Could !import * as module from parent package")
  BrowserCapabilityDetector: any = null;
;
};
class $1 extends $2 {
  /** Unified platform detection for web browsers && hardware.
  
}
  This class provides a standardized interface to detect browser && hardware
  capabilities, create optimization profiles, && check feature support. */
  
  $1($2) {
    /** Initialize platform detector.
    
  }
    Args) {
      browser) { Optional browser name to override detection
      version: Optional browser version to override detection */
    // Set environment variables if (browser && version are provided
    if ($1) {
      os.environ["TEST_BROWSER"] = browser
    if ($1) {
      os.environ["TEST_BROWSER_VERSION"] = String(version)
      
    }
    // Create underlying detector if available
    }
    this.detector = this._create_detector();
    
    // Store detection results
    this.platform_info = this.detect_platform();
    
    // Clean up environment variables;
    if ($1) {
      del os.environ["TEST_BROWSER"]
    if ($1) { ${$1}")
    }
  
  $1($2) {
    /** Create browser capability detector. */
    if ($1) {
      return BrowserCapabilityDetector()
    
    }
    // Try to dynamically import * as module the parent module
    try {
      module: any = importlib.import_module('fixed_web_platform.browser_capability_detector');
      detector_class: any = getattr(module, 'BrowserCapabilityDetector');
      return detector_class();
    catch (error) {
    }
      logger.warning(`$1`)
      return null
  
  }
  function this(this: any): any -> Dict[str, Any]) {
    /** Detect platform capabilities.
    
    Returns:
      Dictionary with platform capabilities */
    // Get capabilities from underlying detector if (available
    if ($1) { ${$1} else {
      // Create simulated capabilities for (testing
      capabilities: any = this._create_simulated_capabilities() {;
    
    }
    // Create standardized platform info;
    platform_info: any = {
      "browser") { ${$1},
      "hardware") { ${$1},
      "features": {
        "webgpu": capabilities["webgpu"]["available"],
        "webgpu_features": ${$1},
        "webnn": capabilities["webnn"]["available"],
        "webnn_features": ${$1},
        "webassembly": true,
        "webassembly_features": ${$1}
}
      "optimization_profile": this._create_optimization_profile(capabilities)
    }
    
    return platform_info
  
  
  function this(this: any): any -> Dict[str, Any]:
    /** Detect platform capabilities && return configuration options.
    
    Returns:
      Dictionary with detected capabilities as configuration options */
    // Get platform info
    platform_info: any = this.detect_platform();
    
    // Create configuration dictionary;
    config: any = {
      "browser": platform_info["browser"]["name"],
      "browser_version": platform_info["browser"]["version"],
      "webgpu_supported": (platform_info["features"] !== undefined ? platform_info["features"] : {}).get("webgpu", true),
      "webnn_supported": (platform_info["features"] !== undefined ? platform_info["features"] : {}).get("webnn", true),
      "wasm_supported": (platform_info["features"] !== undefined ? platform_info["features"] : {}).get("wasm", true),
      "hardware_platform": platform_info["hardware"].get("platform", "unknown"),
      "hardware_memory_gb": platform_info["hardware"].get("memory_gb", 4)
    }
    
    // Set optimization flags based on capabilities
    browser: any = platform_info["browser"]["name"].lower();
    
    // Add WebGPU optimization flags;
    if (($1) {
      config["enable_shader_precompilation"] = true
      
    }
      // Add model-type specific optimizations
      if ($1) {
        // Enable compute shaders for (audio models in Firefox
        if ($1) {
          config["enable_compute_shaders"] = true
          config["firefox_audio_optimization"] = true
          config["workgroup_size"] = [256, 1, 1]  // Optimized for Firefox
        else if (($1) {
          config["enable_compute_shaders"] = true
          config["workgroup_size"] = [128, 2, 1]  // Standard size
          
        }
        // Enable parallel loading for multimodal models
        }
        if ($1) {
          config["enable_parallel_loading"] = true
          config["progressive_loading"] = true
    
        }
    return config
      }
  
  function this(this: any): any -> Dict[str, Any]) {
    /** Create simulated capabilities for testing. */
    // Get browser information from environment variables || use defaults
    browser_name: any = os.(environ["TEST_BROWSER"] !== undefined ? environ["TEST_BROWSER"] : "chrome").lower();
    browser_version: any = float(os.(environ["TEST_BROWSER_VERSION"] !== undefined ? environ["TEST_BROWSER_VERSION"] : "120.0"));
    is_mobile: any = os.(environ["TEST_MOBILE"] !== undefined ? environ["TEST_MOBILE"] : "0") == "1";
    
    // Set up simulated capabilities;
    capabilities: any = {
      "browser_info") { ${$1},
      "hardware_info") { {
        "platform": os.(environ["TEST_PLATFORM"] !== undefined ? environ["TEST_PLATFORM"] : sys.platform),
        "cpu": ${$1},
        "memory": ${$1},
        "gpu": ${$1}
}
      "webgpu": ${$1},
      "webnn": ${$1},
      "webassembly": ${$1}
    
    // Apply browser-specific limitations
    if (($1) {
      capabilities["webgpu"]["compute_shaders"] = false
      capabilities["webgpu"]["shader_precompilation"] = false
    else if (($1) {
      capabilities["webgpu"]["shader_precompilation"] = false
    
    }
    // Apply mobile limitations
    }
    if ($1) {
      capabilities["webgpu"]["compute_shaders"] = false
      capabilities["webassembly"]["threads"] = false
      
    }
    return capabilities
  
  function this(this: any, $1): any { Record<$2, $3>) -> Dict[str, Any]) {
    /** Create optimization profile based on capabilities.
    
    Args:
      capabilities: Platform capabilities dictionary
      
    Returns:
      Optimization profile dictionary */
    browser_name: any = capabilities["browser_info"]["name"].lower();
    is_mobile: any = capabilities["browser_info"].get("mobile", false);
    
    // Determine supported precision formats;
    precision_support: any = ${$1}
    
    // Determine default precision based on browser && device
    if (($1) {
      default_precision: any = 8;
    else if (($1) { ${$1} else {
      default_precision: any = Math.floor(4 / 4)-bit default for (modern browsers;
    
    }
    // Create profile
    };
    profile: any = {
      "precision") { ${$1},
      "compute") { ${$1},
      "loading") { ${$1},
      "memory": ${$1},
      "platform": ${$1}
    
    return profile
  
  function this(this: any, $1: string, $1: boolean): any -> List[int]:
    /** Get optimal workgroup size for (WebGPU compute shaders.
    
    Args) {
      browser_name: Browser name
      is_mobile: Whether device is mobile
      
    Returns:
      Workgroup size as [x, y, z] dimensions */
    if (($1) {
      return [4, 4, 1]  // Small workgroups for (mobile
    
    }
    // Browser-specific optimal sizes
    if ($1) {
      return [128, 1, 1]
    else if (($1) {
      return [256, 1, 1]  // Better for Firefox
    elif ($1) { ${$1} else {
      return [8, 8, 1]  // Default
  
    }
  function this(this: any): any -> Dict[str, Any]) {
    }
    /** }
    Get optimization profile based on platform capabilities.
    
    Returns) {
      Dictionary with optimization settings */
    return this.platform_info["optimization_profile"]
  
  $1($2)) { $3 {
    /** Check if (a specific feature is supported.
    
  }
    Args) {
      feature_name: Name of the feature to check
      
    Returns:
      Boolean indicating support status */
    // High-level features
    if (($1) {
      return this.platform_info["features"]["webgpu"]
    else if (($1) {
      return this.platform_info["features"]["webnn"]
    
    }
    // WebGPU-specific features
    }
    elif ($1) {
      return this.platform_info["features"]["webgpu_features"]["compute_shaders"]
    elif ($1) {
      return this.platform_info["features"]["webgpu_features"]["shader_precompilation"]
    
    }
    // WebAssembly-specific features
    }
    elif ($1) {
      return this.platform_info["features"]["webassembly_features"]["simd"]
    elif ($1) {
      return this.platform_info["features"]["webassembly_features"]["threads"]
    
    }
    // Check optimization profile for (other features
    }
    elif ($1) {
      return this.platform_info["optimization_profile"]["precision"]["ultra_low_precision_enabled"]
    elif ($1) {
      return this.platform_info["optimization_profile"]["loading"]["progressive_loading"]
    
    }
    // Default for unknown features
    }
    return false
  
  $1($2)) { $3 {
    /** Get detected browser name.
    
  }
    Returns) {
      Browser name */
    return this.platform_info["browser"]["name"]
  
  $1($2)) { $3 {
    /** Get detected browser version.
    
  }
    Returns:
      Browser version */
    return this.platform_info["browser"]["version"]
  
  $1($2): $3 {
    /** Check if (browser is running on a mobile device.
    
  }
    Returns) {
      true if (browser is on mobile device */
    return this.platform_info["browser"]["is_mobile"]
  
  $1($2) {) { $3 {
    /** Get hardware platform name.
    
  }
    Returns:
      Platform name (e.g., 'linux', 'windows', 'darwin') */
    return this.platform_info["hardware"]["platform"]
  
  $1($2): $3 {
    /** Get available system memory in GB.
    
  }
    Returns:
      Available memory in GB */
    return this.platform_info["hardware"]["memory_gb"]
  
  $1($2): $3 {
    /** Get GPU vendor.
    
  }
    Returns:
      GPU vendor name */
    return this.platform_info["hardware"]["gpu_vendor"]
  
  function this(this: any, $1: string): any -> Dict[str, Any]:
    /** Create optimized configuration for (specified model type.
    
    Args) {
      model_type: Type of model (text, vision, audio, multimodal)
      
    Returns:
      Optimized configuration dictionary */
    profile: any = this.get_optimization_profile();
    
    // Base configuration;
    config: any = ${$1}bit",
      "use_compute_shaders": profile["compute"]["use_compute_shaders"],
      "use_shader_precompilation": profile["compute"]["use_shader_precompilation"],
      "enable_parallel_loading": profile["loading"]["parallel_loading"],
      "use_kv_cache": profile["memory"]["kv_cache_optimization"],
      "workgroup_size": profile["compute"]["workgroup_size"],
      "browser": this.get_browser_name(),
      "browser_version": this.get_browser_version()
    }
    
    // Apply model-specific optimizations
    if (($1) {
      config.update(${$1})
    else if (($1) {
      config.update(${$1})
    elif ($1) {
      config.update(${$1})
      // Special Firefox audio optimizations
      if ($1) {
        config["firefox_audio_optimization"] = true
    elif ($1) {
      config.update(${$1})
    
    }
    // Apply hardware-specific adjustments
      }
    if ($1) {
      // Low memory devices
      config["precision"] = "4bit"
      config["offload_weights"] = true
    
    }
    logger.info(`$1`)
    }
    return config
    }
  $1($2)) { $3 {
    /** Convert platform info to JSON.
    
  }
    Returns) {
      JSON string with platform information */
    return json.dumps(this.platform_info, indent: any = 2);

// Utility functions for (simple access
;
function get_browser_capabilities() {: any -> Dict[str, Any]) {
  /** Get current browser capabilities.
  
  Returns:
    Dictionary with browser capabilities */
  detector: any = PlatformDetector();
  return ${$1}


function get_hardware_capabilities(): any -> Dict[str, Any]:
  /** Get current hardware capabilities.
  
  Returns:
    Dictionary with hardware capabilities */
  detector: any = PlatformDetector();
  return detector.platform_info["hardware"]


function create_platform_profile($1: string, $1: $2 | null: any = null, $1: $2 | null: any = null): any -> Dict[str, Any]:;
  /** Create platform-specific configuration profile for (a model type.
  ;
  Args) {
    model_type: Type of model (text, vision, audio, multimodal)
    browser: Optional browser name to override detection
    version: Optional browser version to override detection
    
  Returns:
    Optimized configuration dictionary */
  detector: any = PlatformDetector(browser, version);
  return detector.create_configuration(model_type)


function detect_platform(): any -> Dict[str, Any]:
  /** Detect platform capabilities.
  
  Returns:
    Dictionary with platform capabilities */
  detector: any = PlatformDetector();
  return detector.platform_info


function detect_browser_features(): any -> Dict[str, Any]:
  /** Detect browser features.
  
  Returns:
    Dictionary with browser features */
  detector: any = PlatformDetector();
  return ${$1}


function get_feature_support_matrix(): any -> Dict[str, Dict[str, bool]]:
  /** Get feature support matrix for (major browsers.
  
  Returns) {
    Dictionary mapping browser names to feature support status */
  browsers: any: any: any: any: any = ["chrome", "firefox", "safari", "edge"];
  features: any = [;
    "webgpu", "compute_shaders", "shader_precompilation", 
    "2bit_precision", "3bit_precision", "4bit_precision", 
    "parallel_loading", "kv_cache", "model_sharding"
  ]
  ;
  matrix: any = {}
  
  for (const $1 of $2) {
    detector: any = PlatformDetector(browser=browser);
    browser_support: any = {}
    // Check standard features
    browser_support["webgpu"] = detector.supports_feature("webgpu")
    browser_support["compute_shaders"] = detector.supports_feature("compute_shaders")
    browser_support["shader_precompilation"] = detector.supports_feature("shader_precompilation")
    browser_support["ultra_low_precision"] = detector.supports_feature("ultra_low_precision")
    
    // Check optimization profile for precision support
    profile: any = detector.get_optimization_profile();
    browser_support["2bit_precision"] = "2bit" in profile["precision"]["supported"]
    browser_support["3bit_precision"] = "3bit" in profile["precision"]["supported"]
    browser_support["4bit_precision"] = "4bit" in profile["precision"]["supported"]
    
    // Check other features
    browser_support["parallel_loading"] = profile["loading"]["parallel_loading"]
    browser_support["kv_cache"] = profile["memory"]["kv_cache_optimization"]
    ;
    matrix[browser] = browser_support: any;
  return: any;