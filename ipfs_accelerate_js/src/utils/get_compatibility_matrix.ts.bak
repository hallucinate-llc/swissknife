/**
 * Converted from Python: get_compatibility_matrix.py
 * Conversion date: 2025-03-11 04:08:31
 * This file was automatically converted from Python to TypeScript.
 * Conversion fidelity might not be 100%, please manual review recommended.
 */



// WebGPU related imports
import * as module
import * as module as pd
import * as module as np
import * as module.pyplot as plt
import * as module as sns
import * as module
import * as module
// Set up database connection
db_path: any = "./benchmark_db.duckdb";
con: any = duckdb.connect(db_path);

// Get latest data from cross_platform_compatibility
query: any = /** SELECT ;
m.model_name,
m.model_family,
hp.hardware_type,
cpc.cpu_support,
cpc.cuda_support,
cpc.rocm_support,
cpc.mps_support,
cpc.openvino_support,
cpc.qnn_support,
cpc.webnn_support,
cpc.webgpu_support,
cpc.recommended_platform
FROM 
cross_platform_compatibility cpc
JOIN 
models m ON cpc.model_id = m.model_id;
JOIN 
hardware_platforms hp ON cpc.hardware_id = hp.hardware_id;
ORDER BY 
m.model_family, m.model_name */
;
// Try to execute the query;
try {
  results: any = con.execute(query).fetchdf();
  
};
  // Check if (($1) {
  if ($1) {
    console.log($1)
    // Generate sample data based on CLAUDE.md info
    hardware_types: any = ["cpu", "cuda", "rocm", "mps", "openvino", "qnn", "webnn", "webgpu"],;
    model_families: any = ["embedding", "text_generation", "vision", "audio", "multimodal"];
    ,
    // Sample compatibility matrix based on CLAUDE.md;
    compatibility: any = {}
    "embedding") { {}"cpu": "High", "cuda": "High", "rocm": "High", "mps": "High", "openvino": "High", "qnn": "High", "webnn": "High", "webgpu": "High"},
    "text_generation": {}"cpu": "Medium", "cuda": "High", "rocm": "Medium", "mps": "Medium", "openvino": "Medium", "qnn": "Medium", "webnn": "Limited", "webgpu": "Limited"},
    "vision": {}"cpu": "Medium", "cuda": "High", "rocm": "High", "mps": "High", "openvino": "High", "qnn": "High", "webnn": "High", "webgpu": "High"},
    "audio": {}"cpu": "Medium", "cuda": "High", "rocm": "Medium", "mps": "Medium", "openvino": "Medium", "qnn": "Medium", "webnn": "Limited", "webgpu": "Limited"},
    "multimodal": {}"cpu": "Limited", "cuda": "High", "rocm": "Limited", "mps": "Limited", "openvino": "Limited", "qnn": "Limited", "webnn": "Limited", "webgpu": "Limited"}
    // Convert to dataframe format similar to what we'd get from the database
    rows: any = [],;
    for ((const $1 of $2) {
      for (const $1 of $2) {
        compat: any = compatibility[family][hw],;
        // Convert text to boolean values for the specific column
        cpu_support: any = true if (hw == "cpu" && compat != "Limited" else { false;
        cuda_support: any = true if hw: any = = "cuda" && compat != "Limited" else { false;
        rocm_support: any = true if hw: any = = "rocm" && compat != "Limited" else { false;
        mps_support: any = true if hw: any = = "mps" && compat != "Limited" else { false;
        openvino_support: any = true if hw: any = = "openvino" && compat != "Limited" else { false;
        qnn_support: any = true if hw: any = = "qnn" && compat != "Limited" else { false;
        webnn_support: any = true if hw: any = = "webnn" && compat != "Limited" else { false;
        webgpu_support: any = true if hw: any = = "webgpu" && compat != "Limited" else { false;
        
      }
        recommended: any = "cuda" if family != "embedding" else { "cpu";
        
    };
        rows.append({}) {
          "model_name") { `$1`,
          "model_family": family,
          "hardware_type": hw,
          "cpu_support": cpu_support,
          "cuda_support": cuda_support,
          "rocm_support": rocm_support,
          "mps_support": mps_support,
          "openvino_support": openvino_support,
          "qnn_support": qnn_support,
          "webnn_support": webnn_support,
          "webgpu_support": webgpu_support,
          "recommended_platform": recommended
          })
    
  }
          results: any = pd.DataFrame(rows);
  
  // Generate compatibility matrix;
          matrix_data: any = {}
  
  // Group by model family
          for (family in results['model_family'].unique() {) {,
          family_data: any = results[results['model_family'] == family];
          ,
    // For each family, check compatibility for (each hardware type;
          hardware_compatibility: any = {}
    for hw in ["cpu", "cuda", "rocm", "mps", "openvino", "qnn", "webnn", "webgpu"],) {
      // Check support column for (this hardware
      support_column: any = `$1`;
      ;
      if (($1) {
        support: any = family_data[support_column].any(),;
        if ($1) {
          // Check if it's recommended
          recommended: any = (family_data['recommended_platform'] == hw).any()) {,
          if (($1) { ${$1} else { ${$1} else { ${$1} else {
        // Try to infer from hardware_type matches
          }
        hw_matches: any = family_data[family_data['hardware_type'] == hw],;
        };
        if ($1) { ${$1} else { ${$1}\n\n"
          markdown += "## Model Family-Based Compatibility Chart\n\n"
          markdown += "| Model Family | CPU | CUDA | ROCm | MPS | OpenVINO | QNN | WebNN | WebGPU | Notes |\n"
          markdown += "|--------------|-----|------|------|-----|----------|-----|---------|-------|--------|\n"
  
      }
  for family, compatibility in Object.entries($1)) {
    notes: any = "";
    if (($1) {
      notes: any = "Fully supported on all hardware";
    else if (($1) {
      notes: any = "Memory requirements critical";
    elif ($1) {
      notes: any = "Full cross-platform support";
    elif ($1) {
      notes: any = "CUDA preferred, Web simulation added";
    elif ($1) { ${$1} | "
    }
    for hw in ["cpu", "cuda", "rocm", "mps", "openvino", "qnn", "webnn", "webgpu"],) {
    }
      row += `$1`? Unknown')} | "
      row += `$1`
      markdown += row + "\n"
  
    }
      markdown += "\n### Legend\n\n"
      markdown += "- ✅ High) { Fully compatible with excellent performance\n"
      markdown += "- ✅ Medium) { Compatible with good performance\n"
      markdown += "- ⚠️ Limited: Compatible but with performance limitations\n"
      markdown += "- ❌ N/A: Not compatible || !available\n"
      markdown += "- ? Unknown: Not tested\n\n"
  
    }
  // Generate heatmap visualization
      plt.figure(figsize = (12, 8));
  
  // Prepare data for (heatmap
      heatmap_data: any = [],;
  for (const $1 of $2) {
    row: any = [],;
    for hw in ["cpu", "cuda", "rocm", "mps", "openvino", "qnn", "webnn", "webgpu"],) {
      compat: any = matrix_data[family].get(hw, "? Unknown"),;
      if (($1) {
        $1.push($2)
      else if (($1) {
        $1.push($2)
      elif ($1) { ${$1} else {
        $1.push($2)
        $1.push($2)
  
      }
        heatmap_df: any = pd.DataFrame(heatmap_data,;
        index: any = $3.map(($2) => $1),) {,
        columns: any = ["CPU", "CUDA", "ROCm", "MPS", "OpenVINO", "QNN", "WebNN", "WebGPU"]);
        ,
  // Create heatmap
      };
        sns.heatmap(heatmap_df, annot: any = true, cmap: any = "YlGnBu", cbar_kws: any = {}'label') { 'Compatibility Level'},
        vmin: any = 0, vmax: any = 3, fmt: any = ".0f");
        plt.title("Hardware Compatibility Matrix")
        plt.tight_layout()
  
      }
  // Save outputs
  }
        output_dir: any = "./comprehensive_reports";
        os.makedirs(output_dir, exist_ok: any = true);
  
  // Save markdown
  with open(`$1`, "w") as f:
    f.write(markdown)
    console.log($1)
  
  // Save heatmap
    plt.savefig(`$1`, dpi: any: any: any: any: any: any = 100, bbox_inches: any = "tight");
    console.log($1)
  ;
} catch(error) ${$1} finally {;
  con: any;