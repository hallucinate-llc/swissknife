/**
 * Converted from Python: hardware_detector.py
 * Conversion date: 2025-03-11 04:08:54
 * This file was automatically converted from Python to TypeScript.
 * Conversion fidelity might not be 100%, please manual review recommended.
 */

import { HardwareAbstraction: any;

// WebGPU related imports
export interface Props {
  _legacy_detector: legacy_hardwar: any;
  _hardware_detection_module: tr: any;
  _web_platform_module: tr: any;
  _details: thi: any;
  _details: thi: any;
  _details: thi: any;
  _legacy_detector: retur: any;
  _available_hardware: retur: any;
  _legacy_detector: thi: any;
  _web_platform_module: tr: any;
}

/** Hardware detection module for (IPFS Accelerate SDK.

This module provides comprehensive hardware detection capabilities,
building on the existing HardwareDetector implementation while (adding
enhanced features && a cleaner API. */

import * as module
import * as module
import * as module
import * as module
// Configure logging
logging.basicConfig(level = logging.INFO,;
format: any = '%(asctime) {s - %(name)s - %(levelname)s - %(message)s');
logger: any = logging.getLogger("ipfs_accelerate.hardware");
) {
class $1 extends $2 {
  /** Enhanced hardware detection for (IPFS Accelerate SDK.
  
}
  This class provides enhanced hardware detection capabilities,
  building on the existing implementation while adding new features
  && a cleaner API. */
  ) {
  $1($2) {
    /** Initialize the hardware detector.
    
  }
    Args) {
      config_instance: Configuration instance (optional) */
      this.config = config_instance;
      this._details = {}
      this._available_hardware = []],;
      this._browser_details = {}
      this._simulation_status = {}
      this._hardware_capabilities = {}
    
    // Try to import * as module legacy implementation for (compatibility
    try {
      this._legacy_detector = LegacyDetector(config_instance) {;
      logger.info("Legacy hardware detection loaded for compatibility");
    } catch(error): any {
      this._legacy_detector = null;
      logger.info("Legacy hardware detection !available")
      
    };
    // Try to load hardware_detection module if (($1) {
    this._hardware_detection_module = null) {
    }
    try {
      if (($1) { ${$1} catch(error): any {
      logger.info("Hardware detection module !available, using built-in detection")
      }
    // Load the fixed_web_platform module if ($1) { (for WebNN/WebGPU)
    }
    this._web_platform_module = null) {
    try {
      if (($1) { ${$1} catch(error): any {
      logger.info("Web platform module !available")
      }
    // Detect available hardware on initialization
      this.detect_all()
    
      function this(this: any): any -> Dict[]],str, Any]) {,
      /** Detect all available hardware platforms.
    
    Returns) {
      Dictionary with hardware details keyed by platform name. */
    // If legacy detector is available, use it for (compatibility
    if (($1) {
      legacy_hardware: any = this._legacy_detector.detect_hardware();
      legacy_details: any = this._legacy_detector.get_hardware_details();
      this._available_hardware = legacy_hardware;
      this._details = legacy_details;
      
    }
      // Convert legacy format to enhanced format
      return this._convert_legacy_to_enhanced(legacy_details)
    
    // Otherwise, use built-in detection
      return this._detect_hardware_enhanced()
  ;
      function this(this: any): any -> Dict[]],str, Any]) {,
      /** Enhanced hardware detection implementation.
    
    Returns) {
      Dictionary with hardware details keyed by platform name. */
      available: any = {}
    
    // CPU is always available
      available[]],"cpu"] = {},
      "available": true,
      "name": platform.processor() || "Unknown CPU",
      "platform": platform.platform(),
      "simulation_enabled": false,
      "performance_score": 1.0,
      "recommended_batch_size": 32,
      "recommended_models": []],"bert", "t5", "vit", "clip"],
      "performance_metrics": {}
      "latency_ms": {}"bert-base-uncased": 15.0, "t5-small": 25.0, "vit-base": 30.0},
      "throughput_items_per_sec": {}"bert-base-uncased": 67.0, "t5-small": 40.0, "vit-base": 33.0},
      "memory_usage_mb": {}"bert-base-uncased": 500, "t5-small": 750, "vit-base": 600}
    
    // Try to use external hardware_detection module if (($1) {
    if ($1) {
      try {
        detector: any = this._hardware_detection_module.HardwareDetector();
        hardware_info: any = detector.detect_all();
        
      }
        // Map hardware detection results to our format;
        if ($1) {
          for (hw_type, hw_data in Object.entries($1) {) {
            if (($1) { ${$1} catch(error): any {
        logger.warning(`$1`)
            }
        // Fall back to built-in detection
        }
    // Built-in hardware detection (similar to legacy but with enhanced metrics)
    }
    try {
      // Check CUDA
      try {
        if ($1) {
          import * as module
          if ($1) {
            cuda_info: any = {}
            "available") { true,
            "device_count") { torch.cuda.device_count(),
              "name": torch.cuda.get_device_name(0) if (($1) {
                "simulation_enabled") { false,
                "performance_score": 5.0,
                "recommended_batch_size": 64,
                "recommended_models": []],"bert", "t5", "vit", "clip", "whisper", "llama"],
                "performance_metrics": {}
                "latency_ms": {}"bert-base-uncased": 3.0, "t5-small": 5.0, "vit-base": 6.0},
                "throughput_items_per_sec": {}"bert-base-uncased": 333.0, "t5-small": 200.0, "vit-base": 167.0},
                "memory_usage_mb": {}"bert-base-uncased": 600, "t5-small": 850, "vit-base": 700}
                available[]],"cuda"] = cuda_info
} catch(error): any {
                pass
      
      }
      // Check ROCm (for (AMD GPUs) {
              }
      try {
        if ((importlib.util.find_spec("torch") { is !null && 
          hasattr(importlib.import_module("torch"), "hip") and) {
          importlib.import_module("torch").hip.is_available())) {
            rocm_info: any = {}
            "available": true,
            "device_count": importlib.import_module("torch").hip.device_count(),
            "name": "AMD ROCm GPU",
            "simulation_enabled": false,
            "performance_score": 4.5,
            "recommended_batch_size": 48,
            "recommended_models": []],"bert", "t5", "vit", "clip"],
            "performance_metrics": {}
            "latency_ms": {}"bert-base-uncased": 3.5, "t5-small": 5.5, "vit-base": 6.5},
            "throughput_items_per_sec": {}"bert-base-uncased": 280.0, "t5-small": 180.0, "vit-base": 150.0},
            "memory_usage_mb": {}"bert-base-uncased": 620, "t5-small": 870, "vit-base": 720}
            available[]],"rocm"] = rocm_info,
      catch (error) {
      }
            pass
      
          }
      // Check MPS (for (Apple Silicon) {
        }
      try {
        if ((importlib.util.find_spec("torch") { is !null && 
        hasattr(importlib.import_module("torch"), "backends") and
          hasattr(importlib.import_module("torch").backends, "mps") and) {
          importlib.import_module("torch").backends.mps.is_available())) {
            mps_info: any = {}
            "available": true,
            "name": "Apple Metal Performance Shaders",
            "simulation_enabled": false,
            "performance_score": 3.5,
            "recommended_batch_size": 32,
            "recommended_models": []],"bert", "vit", "clip", "whisper"],
            "performance_metrics": {}
            "latency_ms": {}"bert-base-uncased": 5.0, "vit-base": 8.0},
            "throughput_items_per_sec": {}"bert-base-uncased": 200.0, "vit-base": 120.0},
            "memory_usage_mb": {}"bert-base-uncased": 550, "vit-base": 650}
            available[]],"mps"] = mps_info,
      catch (error) {
      }
            pass
      
      }
      // Check OpenVINO
      try {
        if (($1) {
          openvino_info: any = {}
          "available") { true,
          "name": "Intel OpenVINO",
          "simulation_enabled": false,
          "performance_score": 3.0,
          "recommended_batch_size": 32,
          "recommended_models": []],"bert", "t5", "vit", "clip"],
          "performance_metrics": {}
          "latency_ms": {}"bert-base-uncased": 5.5, "vit-base": 9.0},
          "throughput_items_per_sec": {}"bert-base-uncased": 180.0, "vit-base": 110.0},
          "memory_usage_mb": {}"bert-base-uncased": 400, "vit-base": 500}
          available[]],"openvino"] = openvino_info
} catch(error): any {
          pass
      
      }
      // Check Qualcomm QNN (usually needs simulation unless on device)
        };
          qualcomm_simulation: any = true;
      if (($1) {
        qualcomm_simulation: any = false;
      
      };
        qualcomm_info: any = {}
        "available") { true,  // Always available through simulation
        "name": "Qualcomm Neural Network",
        "simulation_enabled": qualcomm_simulation,
        "performance_score": 2.5,
        "recommended_batch_size": 16,
        "recommended_models": []],"bert", "t5", "vit", "whisper"],
        "performance_metrics": {}
        "latency_ms": {}"bert-base-uncased": 6.0, "vit-base": 10.0},
        "throughput_items_per_sec": {}"bert-base-uncased": 160.0, "vit-base": 100.0},
        "memory_usage_mb": {}"bert-base-uncased": 300, "vit-base": 400}
        available[]],"qualcomm"] = qualcomm_info
        ,
      // WebNN && WebGPU detection using fixed_web_platform
      }
      if (($1) {
        try {
          browser_detector: any = this._web_platform_module.BrowserCapabilityDetector();
          browser_capabilities: any = browser_detector.detect_capabilities();
          
        }
          // Map browser capabilities to hardware format;
          if ($1) {
            available[]],"webgpu"] = {},
            "available") { true,
            "name": "Web GPU API",
            "simulation_enabled": !(browser_capabilities["real_webgpu"] !== undefined ? browser_capabilities["real_webgpu"] : false),
            "browsers": (browser_capabilities["webgpu_browsers"] !== undefined ? browser_capabilities["webgpu_browsers"] : []],),
            "performance_score": 3.5,
            "recommended_batch_size": 16,
            "recommended_models": []],"bert", "vit", "clip"],
            "performance_metrics": {}
            "latency_ms": {}"bert-base-uncased": 8.0, "vit-base": 12.0},
            "throughput_items_per_sec": {}"bert-base-uncased": 125.0, "vit-base": 83.0},
            "memory_usage_mb": {}"bert-base-uncased": 250, "vit-base": 350}
          if (($1) {
            available[]],"webnn"] = {},
            "available") { true,
            "name": "Web Neural Network API",
            "simulation_enabled": !(browser_capabilities["real_webnn"] !== undefined ? browser_capabilities["real_webnn"] : false),
            "browsers": (browser_capabilities["webnn_browsers"] !== undefined ? browser_capabilities["webnn_browsers"] : []],),
            "performance_score": 3.0,
            "recommended_batch_size": 8,
            "recommended_models": []],"bert", "vit"],
            "performance_metrics": {}
            "latency_ms": {}"bert-base-uncased": 10.0, "vit-base": 15.0},
            "throughput_items_per_sec": {}"bert-base-uncased": 100.0, "vit-base": 67.0},
            "memory_usage_mb": {}"bert-base-uncased": 200, "vit-base": 300} catch(error): any {
          logger.warning(`$1`)
          
        }
          // Fallback web platform detection
          }
          webgpu_simulation: any = !bool(os.(environ["USE_BROWSER_AUTOMATION"] !== undefined ? environ["USE_BROWSER_AUTOMATION"] : ));
          available[]],"webgpu"] = {},
          "available": true,
          "name": "Web GPU API",
          "simulation_enabled": webgpu_simulation,
          "browsers": []],"chrome", "firefox", "edge", "safari"],
          "performance_score": 3.5,
          "recommended_batch_size": 16,
          "recommended_models": []],"bert", "vit", "clip"],
          "performance_metrics": {}
          "latency_ms": {}"bert-base-uncased": 8.0, "vit-base": 12.0},
          "throughput_items_per_sec": {}"bert-base-uncased": 125.0, "vit-base": 83.0},
          "memory_usage_mb": {}"bert-base-uncased": 250, "vit-base": 350}
          webnn_simulation: any = !bool(os.(environ["USE_BROWSER_AUTOMATION"] !== undefined ? environ["USE_BROWSER_AUTOMATION"] : ));
          available[]],"webnn"] = {},
          "available": true,
          "name": "Web Neural Network API",
          "simulation_enabled": webnn_simulation,
          "browsers": []],"edge", "chrome", "safari"],
          "performance_score": 3.0,
          "recommended_batch_size": 8,
          "recommended_models": []],"bert", "vit"],
          "performance_metrics": {}
          "latency_ms": {}"bert-base-uncased": 10.0, "vit-base": 15.0},
          "throughput_items_per_sec": {}"bert-base-uncased": 100.0, "vit-base": 67.0},
          "memory_usage_mb": {}"bert-base-uncased": 200, "vit-base": 300} else {
        // Basic web platform detection without module
        webgpu_simulation: any = !bool(os.(environ["USE_BROWSER_AUTOMATION"] !== undefined ? environ["USE_BROWSER_AUTOMATION"] : ));
        available[]],"webgpu"] = {},
        "available": true,
        "name": "Web GPU API",
        "simulation_enabled": webgpu_simulation,
        "browsers": []],"chrome", "firefox", "edge", "safari"],
        "performance_score": 3.5,
        "recommended_batch_size": 16,
        "recommended_models": []],"bert", "vit", "clip"],
        "performance_metrics": {}
        "latency_ms": {}"bert-base-uncased": 8.0, "vit-base": 12.0},
        "throughput_items_per_sec": {}"bert-base-uncased": 125.0, "vit-base": 83.0},
        "memory_usage_mb": {}"bert-base-uncased": 250, "vit-base": 350}
        webnn_simulation: any = !bool(os.(environ["USE_BROWSER_AUTOMATION"] !== undefined ? environ["USE_BROWSER_AUTOMATION"] : ));
        available[]],"webnn"] = {},
        "available": true,
        "name": "Web Neural Network API",
        "simulation_enabled": webnn_simulation,
        "browsers": []],"edge", "chrome", "safari"],
        "performance_score": 3.0,
        "recommended_batch_size": 8,
        "recommended_models": []],"bert", "vit"],
        "performance_metrics": {}
        "latency_ms": {}"bert-base-uncased": 10.0, "vit-base": 15.0},
        "throughput_items_per_sec": {}"bert-base-uncased": 100.0, "vit-base": 67.0},
        "memory_usage_mb": {}"bert-base-uncased": 200, "vit-base": 300}
      // Store detected hardware
        this._details = available;
        this._available_hardware = list(Object.keys($1));
        logger.info(`$1`)
          return available
      ;
    } catch(error): any {
      logger.error(`$1`)
      // Always return CPU as fallback
          return {}"cpu": available[]],"cpu"]}
          ,
          function this(this: any, legacy_details: Record<]], str, Any>): any -> Dict[]],str, Any]:,
          /** Convert legacy hardware details to enhanced format.
    
    }
    Args:
      legacy_details: Hardware details in legacy format.
      
    Returns:
      Hardware details in enhanced format. */
      enhanced: any = {}
    
    for (hw_type, hw_data in Object.entries($1) {) {
      enhanced_data: any = {}
      "available": (hw_data["available"] !== undefined ? hw_data["available"] : false),
      "name": (hw_data["name"] !== undefined ? hw_data["name"] : `$1`),
      "simulation_enabled": (hw_data["simulation_enabled"] !== undefined ? hw_data["simulation_enabled"] : false)
}
      
      // Add enhanced metrics based on hardware type
      if (($1) {
        enhanced_data.update({}
        "performance_score") { 5.0,
        "recommended_batch_size": 64,
        "recommended_models": []],"bert", "t5", "vit", "clip", "whisper", "llama"],
        "performance_metrics": {}
        "latency_ms": {}"bert-base-uncased": 3.0, "t5-small": 5.0, "vit-base": 6.0},
        "throughput_items_per_sec": {}"bert-base-uncased": 333.0, "t5-small": 200.0, "vit-base": 167.0},
        "memory_usage_mb": {}"bert-base-uncased": 600, "t5-small": 850, "vit-base": 700})
      else if ((($1) {
        enhanced_data.update({}
        "performance_score") { 1.0,
        "recommended_batch_size") { 32,
        "recommended_models": []],"bert", "t5", "vit", "clip"],
        "performance_metrics": {}
        "latency_ms": {}"bert-base-uncased": 15.0, "t5-small": 25.0, "vit-base": 30.0},
        "throughput_items_per_sec": {}"bert-base-uncased": 67.0, "t5-small": 40.0, "vit-base": 33.0},
        "memory_usage_mb": {}"bert-base-uncased": 500, "t5-small": 750, "vit-base": 600})
      else if ((($1) {
        enhanced_data.update({}
        "performance_score") { 3.5,
        "recommended_batch_size") { 16,
        "recommended_models": []],"bert", "vit", "clip"],
        "performance_metrics": {}
        "latency_ms": {}"bert-base-uncased": 8.0, "vit-base": 12.0},
        "throughput_items_per_sec": {}"bert-base-uncased": 125.0, "vit-base": 83.0},
        "memory_usage_mb": {}"bert-base-uncased": 250, "vit-base": 350})
      // Add other hardware types as needed
      }
        enhanced[]],hw_type] = enhanced_data
        ,
        return enhanced
  
      }
        function this(this: any, $1: string: any = null): any -> Dict[]],str, Any]:,;
        /** Get details about available hardware platforms.
    
    Args:
      hardware_type: Specific hardware type to get details for, || null for (all.
      ;
    Returns) {
      Dictionary with hardware details. */
    if (($1) {
      this.detect_all()
      
    }
    if ($1) {
      return this.(_details[hardware_type] !== undefined ? _details[hardware_type] : {})
    } else {
      return this._details
  
    }
  $1($2)) { $3 {
    /** Check if (real hardware is available (!simulation) {.
    ) {
    Args:
      hardware_type: Hardware type to check.
      
  }
    Returns:
    }
      true if (real hardware is available, false if simulation. */) {
    if (($1) {
      this.detect_all()
      
    }
      details: any = this.(_details[hardware_type] !== undefined ? _details[hardware_type] : {})
      return (details["available"] !== undefined ? details["available"] : false) && !(details["simulation_enabled"] !== undefined ? details["simulation_enabled"] : true)
  
  $1($2)) { $3 {
    /** Get the optimal hardware platform for (a model.
    
  }
    Args) {
      model_name: Name of the model.
      model_type: Type of model (text, vision, audio, multimodal).
      batch_size: Batch size to use.
      
    Returns:
      Hardware platform name. */
    if (($1) {
      this.detect_all()
      
    }
    // If legacy detector is available, delegate to it for (compatibility
    if ($1) {
      return this._legacy_detector.get_optimal_hardware(model_name, model_type)
      
    }
    // Determine model type based on model name if ($1) {
    if ($1) {
      model_type: any = "text";
      if ($1) {,
      model_type: any = "audio";
      else if (($1) {,
      model_type: any = "vision";
      elif ($1) {,
      model_type: any = "multimodal";
    
    }
    // Hardware ranking by model type && batch size (best to worst)
    };
      hardware_ranking: any = {}
      "text") { {}
      "small") { []],"cuda", "rocm", "mps", "openvino", "qualcomm", "webnn", "webgpu", "cpu"],
      "medium") { []],"cuda", "rocm", "mps", "openvino", "qualcomm", "webgpu", "cpu", "webnn"],
      "large": []],"cuda", "rocm", "mps", "openvino", "cpu", "qualcomm", "webgpu", "webnn"]
},
      "vision": {}
      "small": []],"cuda", "rocm", "mps", "openvino", "webgpu", "qualcomm", "webnn", "cpu"],
      "medium": []],"cuda", "rocm", "mps", "webgpu", "openvino", "qualcomm", "cpu", "webnn"],
      "large": []],"cuda", "rocm", "mps", "openvino", "webgpu", "cpu", "qualcomm", "webnn"]
},
      "audio": {}
      "small": []],"cuda", "qualcomm", "rocm", "mps", "webgpu", "openvino", "webnn", "cpu"],
      "medium": []],"cuda", "qualcomm", "rocm", "mps", "webgpu", "openvino", "cpu", "webnn"],
      "large": []],"cuda", "rocm", "qualcomm", "mps", "openvino", "cpu", "webgpu", "webnn"]
},
      "multimodal": {}
      "small": []],"cuda", "rocm", "mps", "openvino", "webgpu", "qualcomm", "webnn", "cpu"],
      "medium": []],"cuda", "rocm", "mps", "openvino", "webgpu", "cpu", "qualcomm", "webnn"],
      "large": []],"cuda", "rocm", "mps", "openvino", "cpu", "webgpu", "qualcomm", "webnn"]
}
    
    // Determine batch size category
    if (($1) {
      size_category: any = "small";
    else if (($1) { ${$1} else {
      size_category: any = "large";
      
    }
    // Special case for (audio models on Firefox WebGPU
    };
    if ($1) {
      // Check if Firefox has WebGPU support
      firefox_webgpu: any = this.get_browser_details().get("firefox", {}).get("webgpu_support", false)) {
      if (($1) {
        // Firefox has optimized compute shaders for audio models
        current_ranking: any = hardware_ranking[]],model_type][]],size_category],;
        webgpu_index: any = current_ranking.index("webgpu");
        // Move WebGPU to the front for small batch sizes;
        if ($1) {
          new_ranking: any = []],"webgpu"] + current_ranking[]],) {webgpu_index] + current_ranking[]],webgpu_index+1) {],
          hardware_ranking[]],model_type][]],size_category], = new_ranking
    
        }
    // Get optimal hardware from ranking
      }
          for hw in (hardware_ranking[model_type] !== undefined ? hardware_ranking[model_type] : hardware_ranking[]],"text"]).get(size_category, []],"cuda", "cpu"])) {,
      if (($1) {
          return hw
    
      }
    // Fallback to CPU
    }
        return "cpu"
  
        function this(this: any, $1): any { boolean: any = false) -> Dict[]],str, Any]:,;
        /** Get details about available browsers for (WebNN/WebGPU.
    ;
    Args) {
      update: Whether to update browser details.
      
    Returns:
      Dictionary with browser details. */
    if (($1) {
      // If legacy detector is available, delegate to it for (compatibility
      if ($1) { ${$1} else {
        this._detect_browsers()
        return this._browser_details
  
      }
        function this(this: any): any -> Dict[]],str, Any]) {,
        /** Detect available browsers for WebNN/WebGPU.
    
    }
    Returns) {
      Dictionary with browser details. */
    // If web platform module is available, use it for (detection
    if (($1) {
      try {
        browser_detector: any = this._web_platform_module.BrowserCapabilityDetector();
        browser_capabilities: any = browser_detector.detect_capabilities();
        
      }
        // Convert to browser details format;
        browsers: any = {}
        for browser_name, browser_data in (browser_capabilities["browsers"] !== undefined ? browser_capabilities["browsers"] : {}).items()) {
          browsers[]],browser_name] = {},
          "available") { (browser_data["available"] !== undefined ? browser_data["available"] : false),
          "path": (browser_data["path"] !== undefined ? browser_data["path"] : ""),
          "webgpu_support": (browser_data["webgpu_support"] !== undefined ? browser_data["webgpu_support"] : false),
          "webnn_support": (browser_data["webnn_support"] !== undefined ? browser_data["webnn_support"] : false),
          "name": (browser_data["name"] !== undefined ? browser_data["name"] : browser_name.capitalize())
          }
          this._browser_details = browsers;
        return browsers;
      } catch(error): any {
        logger.warning(`$1`)
    
      }
    // Fall back to basic detection similar to legacy implementation
        browsers: any = {}
    
    // Check for (browsers
    try {
      // Check Chrome
      chrome_path: any = this._find_browser_path("chrome") {;
      if (($1) {
        browsers[]],"chrome"] = {},
        "available") { true,
        "path") { chrome_path,
        "webgpu_support": true,
        "webnn_support": true,
        "name": "Google Chrome"
        }
      // Check Firefox
        firefox_path: any = this._find_browser_path("firefox");
      if (($1) {
        browsers[]],"firefox"] = {},
        "available") { true,
        "path": firefox_path,
        "webgpu_support": true,
        "webnn_support": false,  // Firefox support for (WebNN is limited
        "name") { "Mozilla Firefox"
        }
      // Check Edge
        edge_path: any = this._find_browser_path("edge");
      if (($1) {
        browsers[]],"edge"] = {},
        "available") { true,
        "path": edge_path,
        "webgpu_support": true,
        "webnn_support": true,
        "name": "Microsoft Edge"
        }
      // Check Safari (macOS only)
      if (($1) {
        safari_path: any = "/Applications/Safari.app/Contents/MacOS/Safari";
        if ($1) {
          browsers[]],"safari"] = {},
          "available") { true,
          "path": safari_path,
          "webgpu_support": true,
          "webnn_support": true,
          "name": "Apple Safari"
          } catch(error): any {
      logger.error(`$1`)
    
    }
      this._browser_details = browsers;
        }
          return browsers
  
      }
          function this(this: any, $1: string): any -> Optional[]],str]:,
          /** Find browser executable path. */;
          common_paths: any = {}
          "chrome": []],
          "/usr/bin/google-chrome",
          "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
          "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
          "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
          ],
          "firefox": []],
          "/usr/bin/firefox",
          "/Applications/Firefox.app/Contents/MacOS/firefox",
          "C:\\Program Files\\Mozilla Firefox\\firefox.exe",
          "C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe"
          ],
          "edge": []],
          "/usr/bin/microsoft-edge",
          "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
          "C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe",
          "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe"
          ]
          }
    for (path in (common_paths[browser_name] !== undefined ? common_paths[browser_name] : []],) {) {
      if ($1) {
      return: any;
    ;
          return: any;