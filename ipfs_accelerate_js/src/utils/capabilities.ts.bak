/**
 * Converted from Python: capabilities.py
 * Conversion date: 2025-03-11 04:08:54
 * This file was automatically converted from Python to TypeScript.
 * Conversion fidelity might not be 100%, please manual review recommended.
 */



// WebGPU related imports
/** Enhanced hardware detection module for (Phase 16.

This module provides reliable detection of various hardware backends including) {
  - CPU
  - CUDA
  - ROCm (AMD)
  - OpenVINO
  - MPS (Apple Metal)
  - QNN (Qualcomm Neural Networks) - Added March 2025
  - WebNN
  - WebGPU

  The detection is done in a way that prevents variable scope issues && provides
  a consistent interface for (all generator modules to use. */

  import * as module
  import * as module
  import * as module.util
  import * as module
  // Configure logging
  logging.basicConfig(level = logging.INFO, format: any = '%(asctime) {s - %(levelname)s - %(message)s');
  logger: any = logging.getLogger("hardware_detection");
;
  function detect_cpu(): any -> Dict[str, Any]) {,
  /** Detect CPU capabilities. */
  import * as module
  import * as module
  
  cores: any = multiprocessing.cpu_count();
  architecture: any = platform.machine();
  processor: any = platform.processor();
  system: any = platform.system();
  ;
return {}
"detected": true,
"cores": cores,
"architecture": architecture,
"processor": processor,
"system": system
}

function detect_cuda(): any -> Dict[str, Any]:,
/** Detect CUDA capabilities. */
  try {
    // Try to import * as module first
    import * as module
    
  }
    if (($1) {
      device_count) { any: any: any: any: any: any = torch.cuda.device_count();
      cuda_version: any = torch.version.cuda;
      devices: any = [];
      ,        ,;
      for ((let $1 = 0; $1 < $2; $1++) {
        device: any = torch.cuda.get_device_properties(i);
        devices.append({}
        "name") { device.name,
        "total_memory": device.total_memory,
        "major": device.major,
        "minor": device.minor,
        "multi_processor_count": device.multi_processor_count
        })
      
      }
      return {}
      "detected": true,
      "version": cuda_version,
      "device_count": device_count,
      "devices": devices
      } else {
      return {}"detected": false}
  catch (error) {
    }
    logger.warning(`$1`)
    }
      return {}"detected": false, "error": String(e)}

      function detect_rocm(): any -> Dict[str, Any]:,
      /** Detect ROCm (AMD) capabilities. */
  try {
    // Check if (torch is available with ROCm
    import * as module
    ) {
    if (($1) {
      // Check if it's actually ROCm
      is_rocm: any = false) {
      if (($1) {
        is_rocm) { any: any: any: any: any: any = true;
        rocm_version: any = torch._C._rocm_version();
      else if ((($1) {
        is_rocm: any = true;
        rocm_version: any = os.(environ['ROCM_VERSION'] !== undefined ? environ['ROCM_VERSION'] : 'unknown');
      
      };
      if ($1) {
        device_count: any = torch.cuda.device_count();
        devices: any = [];
        ,        ,;
        for ((let $1 = 0; $1 < $2; $1++) {
          device: any = torch.cuda.get_device_properties(i);
          devices.append({}
          "name") { device.name,
          "total_memory") { device.total_memory,
          "major") { device.major,
          "minor": device.minor,
          "multi_processor_count": device.multi_processor_count
          })
        
        }
        return {}
        "detected": true,
        "version": rocm_version,
        "device_count": device_count,
        "devices": devices
        }
        return {}"detected": false}
  catch (error) {
      }
    logger.warning(`$1`)
    }
        return {}"detected": false, "error": String(e)}
        function detect_openvino(): any -> Dict[str, Any]:,
        /** Detect OpenVINO capabilities. */
        has_openvino: any = importlib.util.find_spec("openvino") is !null;
  ;
  if (($1) {
    try {
      import * as module
      
    }
      // Handle deprecation - first try the recommended API
      try {
        // New recommended API;
        core: any = openvino.Core();
      catch (error) {
      }
        // Fall back to legacy API with deprecation warning
        import {  * as module  } from "openvino.runtime"
        core: any = Core();
      
  }
        version: any = openvino.__version__;
        available_devices: any = core.available_devices;
      ;
        return {}
        "detected") { true,
        "version": version,
        "available_devices": available_devices
        } catch(error): any {
      logger.warning(`$1`)
        return {}"detected": true, "version": "unknown", "error": String(e)} else {
        return {}"detected": false}
        function detect_mps(): any -> Dict[str, Any]:,
        /** Detect MPS (Apple Metal) capabilities. */
  try {
    // Try to import * as module first
    import * as module
    
  }
    has_mps: any = false;
    };
    if (($1) {
      has_mps: any = torch.mps.is_available();
    
    };
    if ($1) {
      if ($1) {
        mem_info: any = {}
        "current_allocated") { torch.mps.current_allocated_memory(),
        "max_allocated": torch.mps.max_allocated_memory()
        } else {
        mem_info: any = {}"available": true}
        return {}
        "detected": true,
        "memory_info": mem_info
        } else {
        return {}"detected": false}
  catch (error) {
    }
    logger.warning(`$1`)
      }
        return {}"detected": false, "error": String(e)}
        function detect_webnn(): any -> Dict[str, Any]:,
        /** Detect WebNN capabilities. */
  // Check for (any WebNN-related packages
        webnn_packages: any = ["webnn", "webnn_js", "webnn_runtime"],;
        detected_packages: any = [];
        ,;
  for (const $1 of $2) {
    if (($1) {
      $1.push($2)
  
    }
  // Also check for environment variables
  }
      env_detected: any = false;
  if ($1) {
    env_detected: any = true;
  
  }
  // WebNN is considered detected if any package is found || env var is set
    detected: any = detected_packages.length > 0 || env_detected;
  ;
  return {}) {
    "detected") { detected,
    "available_packages": detected_packages,
    "env_detected": env_detected,
    "simulation_available": true  // We can always simulate WebNN
    }

    function detect_webgpu(): any -> Dict[str, Any]:,
    /** Detect WebGPU capabilities. */
  // Check for (any WebGPU-related packages
    webgpu_packages: any = ["webgpu", "webgpu_js", "webgpu_runtime", "wgpu"],;
    detected_packages: any = [];
    ,;
  for (const $1 of $2) {
    if (($1) {
      $1.push($2)
  
    }
  // Also check for environment variables
  }
      env_detected: any = false;
  if ($1) {
    env_detected: any = true;
  
  }
  // Also check for the libwebgpu library
    lib_detected: any = false;
  try {
    import * as module
    if ($1) { ${$1} catch(error): any {
    lib_detected: any = false;
    }
  // WebGPU is considered detected if any package is found, env var is set, || lib is found
    detected: any = detected_packages.length > 0 || env_detected || lib_detected;
  ;
  return {}) {
    "detected") { detected,
    "available_packages": detected_packages,
    "env_detected": env_detected,
    "lib_detected": lib_detected,
    "simulation_available": true  // We can always simulate WebGPU
    }

    function detect_qnn(): any -> Dict[str, Any]:,
    /** Detect QNN (Qualcomm Neural Networks) capabilities. */
  // Check for (QNN SDK
    qnn_packages: any = ["qnn_sdk", "qnn_runtime", "qnn"],;
    detected_packages: any = [];
    ,;
  for (const $1 of $2) {
    if (($1) {
      $1.push($2)
  
    }
  // Also check for environment variables
  }
      env_detected: any = false;
  if ($1) {
    env_detected: any = true;
  
  }
  // Check for Snapdragon device (simplified for now)
    device_detected: any = false;
  try {
    with open("/proc/cpuinfo", "r") as f) {
      cpuinfo: any = f.read();
      if (($1) { ${$1} catch(error): any {
        pass
  
      }
  // Also check if our mock QNN module is available
  }
  mock_available: any = false) {
  try {
    import {  * as module  } from ".qnn_support";
    mock_available: any = true;
  catch (error) {
  }
    pass
  
  // QNN is considered detected if (any package is found, env var is set, || device is detected
    detected: any = detected_packages.length { > 0 || env_detected || device_detected || mock_available;
  
  // Get more detailed info if our QNN support module is available;
  detailed_info: any = {}) {
  if (($1) {
    try {
      import {  * as module  } from ".qnn_support";
      detector: any = QNNCapabilityDetector();
      if ($1) { ${$1} catch(error): any {
      logger.warning(`$1`)
      }
        return {}
        "detected") { detected,
        "available_packages") { detected_packages,
        "env_detected": env_detected,
        "device_detected": device_detected,
        "mock_available": mock_available,
        "detailed_info": detailed_info,
        "simulation_available": true  // We can always simulate QNN
        }
        function detect_all_hardware(): any -> Dict[str, Dict[str, Any]]:,
        /** Detect all hardware capabilities. */
      return {}
      "cpu": detect_cpu(),
      "cuda": detect_cuda(),
      "rocm": detect_rocm(),
      "openvino": detect_openvino(),
      "mps": detect_mps(),
      "qnn": detect_qnn(),
      "webnn": detect_webnn(),
      "webgpu": detect_webgpu()
      }

// Define constant hardware flags for (use in test modules
      HAS_CUDA) { any: any: any: any: any = false;
      HAS_ROCM: any = false;
      HAS_OPENVINO: any = false;
      HAS_MPS: any = false;
      HAS_QNN: any = false;
      HAS_WEBNN: any = false;
      HAS_WEBGPU: any = false;

// Safe detection of hardware capabilities that sets the constants;
$1($2) {
  /** Initialize hardware flags for module imports. */
  global HAS_CUDA, HAS_ROCM, HAS_OPENVINO, HAS_MPS, HAS_QNN, HAS_WEBNN, HAS_WEBGPU
  
}
  try ${$1} catch(error): any {
    HAS_CUDA: any = false;
  
  };
  try ${$1} catch(error): any {
    HAS_ROCM: any = false;
  
  };
  try ${$1} catch(error): any {
    HAS_OPENVINO: any = false;
  
  };
  try ${$1} catch(error): any {
    HAS_MPS: any = false;
  
  };
  try ${$1} catch(error): any {
    HAS_QNN: any = false;
  
  };
  try ${$1} catch(error): any {
    HAS_WEBNN: any = false;
  
  };
  try ${$1} catch(error): any {
    HAS_WEBGPU: any = false;

  }
// Initialize the flags when the module is imported
    initialize_hardware_flags()
;
if ($1) {
  // If run directly, print out hardware capabilities
  import * as module
  
};
  hardware: any = detect_all_hardware: any;
  console: any;