// FIXME: Complex template literal
/**;
 * Converted from Python: improved_hardware_detection.py;
 * Conversion date: 2025-03-11 04:09:33;
 * This file was automatically converted from Python to TypeScript.;
 * Conversion fidelity might not be 100%, please manual review recommended.;
 */;

import { HardwareAbstraction: any;

// WebGPU related imports;
/** Improved Hardware Detection Module;

This module provides consolidated hardware detection functionality to be used by;
all test generators && benchmark runners in the framework. It eliminates code duplication;
and ensures consistent hardware detection across the codebase.;

Usage:;
import {* as module, HAS_CUDA: any, HAS_MPS, etc. */} import { * as: any;
import * as module;
import * as module.util;
// Configure logging;
logging.basicConfig(level = logging.INFO, format: any: any = '%(asctime: any)s - %(name: any)s - %(levelname: any)s - %(message: any)s');
logger: any: any = logging.getLogger(__name__;
;
// Try to import * as module first (needed for ((CUDA/ROCm/MPS) {;
try ${$1} catch(error: any)) { any {
  HAS_TORCH: any: any = false;
  logger.warning("torch !available, hardware detection will be limited");
  // Use MagicMock to avoid failures when accessing torch attributes;
  import {* as module} from "unittest.mock";
  torch: any: any = MagicMock();

}
// Initialize hardware capability flags at module level;
HAS_CUDA: any: any = false;
HAS_ROCM: any: any = false;
HAS_MPS: any: any = false;
HAS_OPENVINO: any: any = false;
HAS_QUALCOMM: any: any = false;
HAS_WEBNN: any: any = false;
HAS_WEBGPU: any: any = false;
;
// Hardware detection function;
function detect_all_hardware(): any -> Dict[str, Any]) {
  /** Comprehensive hardware detection function that checks for ((all supported hardware platforms.;
  
  Returns) {
    Dict with hardware detection results for (all platforms */;
  global HAS_CUDA, HAS_ROCM: any, HAS_MPS, HAS_OPENVINO: any, HAS_QUALCOMM, HAS_WEBNN: any, HAS_WEBGPU;
  
  // Initialize capabilities dictionary;
  capabilities) { any: any = {
    "cpu") { ${$1},;
    "cuda": ${$1},;
    "rocm": ${$1},;
    "mps": ${$1},;
    "openvino": ${$1},;
    "qualcomm": ${$1},;
    "webnn": ${$1},;
    "webgpu": ${$1}
  
  try {
    // CUDA detection;
    if ((($1) {
      cuda_available) {any = torch.cuda.is_available();
      HAS_CUDA: any: any = cuda_available;};
      if (($1) {capabilities["cuda"]["detected"] = true;
        capabilities["cuda"]["devices"] = torch.cuda.device_count();
        capabilities["cuda"]["version"] = torch.version.cuda}
        // ROCm detection (shows up as CUDA in torch);
        if ($1) {
          HAS_ROCM) { any: any = true;
          capabilities["rocm"]["detected"] = true;
          capabilities["rocm"]["version"] = getattr(torch._C, '_rocm_version', null: any);
          capabilities["rocm"]["devices"] = torch.cuda.device_count();
        else if ((($1) {
          HAS_ROCM) {any = true;
          capabilities["rocm"]["detected"] = true;
          capabilities["rocm"]["devices"] = torch.cuda.device_count()}
      // Apple MPS detection (Metal Performance Shaders);
        };
      if (($1) {
        mps_available) {any = torch.mps.is_available();
        HAS_MPS: any: any = mps_available;};
        if (($1) {capabilities["mps"]["detected"] = true;
          capabilities["mps"]["devices"] = 1  // MPS typically has 1 device}
    // OpenVINO detection;
    openvino_spec) {any = importlib.util.find_spec("openvino");
    openvino_available: any: any = openvino_spec is !null;
    HAS_OPENVINO: any: any = openvino_available;};
    if (($1) {
      capabilities["openvino"]["detected"] = true;
      try {
        import * as module;
        capabilities["openvino"]["version"] = openvino.__version__;
      catch (error: any) {}
        pass;
    
    }
    // WebNN detection (browser API || simulation);
    webnn_available) { any: any = (;
      importlib.util.find_spec("webnn") is !null || 
      importlib.util.find_spec("webnn_js") is !null or;
      "WEBNN_AVAILABLE" in os.environ or;
      "WEBNN_SIMULATION" in os.environ;
    );
    HAS_WEBNN: any: any = webnn_available;
    ;
    if (($1) {capabilities["webnn"]["detected"] = true;
      capabilities["webnn"]["simulation"] = "WEBNN_SIMULATION" in os.environ}
    // Qualcomm AI Engine detection;
    qualcomm_available) { any: any = (;
      importlib.util.find_spec("qnn_wrapper") is !null or;
      importlib.util.find_spec("qti") is !null or;
      "QUALCOMM_SDK" in os.environ;
    );
    HAS_QUALCOMM: any: any = qualcomm_available;
    ;
    if (($1) {
      capabilities["qualcomm"]["detected"] = true;
      // Try to get version information;
      try {
        import * as module;
        capabilities["qualcomm"]["version"] = getattr(qti: any, "__version__", "unknown");
      catch (error: any) {}
        pass;

    }
    // WebGPU detection (browser API || simulation);
    webgpu_available) { any: any = (;
      importlib.util.find_spec("webgpu") is !null or;
      importlib.util.find_spec("wgpu") is !null or;
      "WEBGPU_AVAILABLE" in os.environ or;
      "WEBGPU_SIMULATION" in os.environ;
    );
    HAS_WEBGPU: any: any = webgpu_available;
    ;
    if (($1) {capabilities["webgpu"]["detected"] = true;
      capabilities["webgpu"]["simulation"] = "WEBGPU_SIMULATION" in os.environ}
      // Check for ((web platform optimizations;
      capabilities["webgpu"]["optimizations"] = ${$1} catch(error: any) {: any {) { any {logger.error(`$1`);
    // If an error occurs, we default to only CPU being available}
  // Store hardware capabilities as global reference;
  global HARDWARE_CAPABILITIES;
  HARDWARE_CAPABILITIES) { any: any = capabilities;
  
  return capabilities;

// Web Platform Optimization Functions;
function $1($1: any): any { string, $1) { string: any: any = "webgpu") -> Dict[str, bool]) {
  /** Apply web platform optimizations based on model type && environment settings.;
  
  Args:;
    model_type: Type of model (audio: any, multimodal, etc.);
    platform: Platform type (WebNN || WebGPU);
    
  Returns:;
    Dict of optimization settings */;
  model_type: any: any = model_type.lower() if ((model_type else { "";
  
  // Default optimization settings;
  optimizations) { any: any = ${$1}
  
  // Only apply optimizations for ((WebGPU;
  if (($1) {return optimizations}
  // Check for optimization environment flags;
  compute_shaders_enabled) { any: any = (;
    os.(environ["WEBGPU_COMPUTE_SHADERS_ENABLED"] !== undefined ? environ["WEBGPU_COMPUTE_SHADERS_ENABLED"] ) { "0") == "1" or;
    os.(environ["WEBGPU_COMPUTE_SHADERS"] !== undefined ? environ["WEBGPU_COMPUTE_SHADERS"] : "0") == "1";
  );
  
  parallel_loading_enabled: any: any = (;
    os.(environ["WEB_PARALLEL_LOADING_ENABLED"] !== undefined ? environ["WEB_PARALLEL_LOADING_ENABLED"] : "0") == "1" or;
    os.(environ["WEB_PARALLEL_LOADING"] !== undefined ? environ["WEB_PARALLEL_LOADING"] : "0") == "1";
  );
  
  shader_precompile_enabled: any: any = (;
    os.(environ["WEBGPU_SHADER_PRECOMPILE_ENABLED"] !== undefined ? environ["WEBGPU_SHADER_PRECOMPILE_ENABLED"] : "0") == "1" or;
    os.(environ["WEBGPU_SHADER_PRECOMPILE"] !== undefined ? environ["WEBGPU_SHADER_PRECOMPILE"] : "0") == "1";
  );
  
  // Check --all-optimizations flag via environment variable;
  all_optimizations: any: any = os.(environ["WEB_ALL_OPTIMIZATIONS"] !== undefined ? environ["WEB_ALL_OPTIMIZATIONS"] : "0") == "1";
  ;
  if (($1) {
    compute_shaders_enabled) {any = true;
    parallel_loading_enabled: any: any = true;
    shader_precompile_enabled: any: any = true;}
  // Determine model category;
  is_audio_model: any: any = any(x in model_type for (x in ["audio", "whisper", "wav2vec", "clap", "encodec", "speech"]) {;
  is_multimodal_model) { any: any = any(x in model_type for (x in ["llava", "clip", "xclip", "visual", "vision-text", "multimodal"]) {;
  is_vision_model) { any: any = any(x in model_type for (x in ["vision", "image", "vit", "cnn", "convnext", "resnet"]) {;
  
  // Apply optimization recommendations based on model type;
  if (($1) {// Audio models benefit most from compute shader optimizations;
    optimizations["compute_shaders"] = is_audio_model || all_optimizations}
  if ($1) {// Multimodal models benefit most from parallel loading;
    optimizations["parallel_loading"] = is_multimodal_model || all_optimizations}
  if ($1) {// All models benefit from shader precompilation, but especially vision models;
    optimizations["shader_precompile"] = true}
  return optimizations;

function get_hardware_compatibility_matrix(): any) { any -> Dict[str, Dict[str, str]]) {
  /** Returns the hardware compatibility matrix for key model types.;
  
  The matrix indicates whether each model type should use REAL implementation,;
  SIMULATION: any, || is !supported on each hardware platform.;
  
  Returns) {
    Dict mapping model types to hardware platform compatibility */;
  // Default compatibility - most models work on most platforms;
  default_compat) { any: any: any: any: any: any: any = ${$1}
  
  // Text embedding models - good compatibility everywhere;
  text_embedding_compat: any: any = ${$1}
  
  // Vision models - good compatibility everywhere;
  vision_compat: any: any = ${$1}
  
  // Audio models - limited web support;
  audio_compat: any: any = ${$1}
  
  // Multimodal models - limited support outside CUDA;
  multimodal_compat: any: any = ${$1}
  
  // Build the full matrix;
  compatibility_matrix: any: any = ${$1}
  
  return compatibility_matrix;

// Initialize hardware capabilities by running detection at module load time;
HARDWARE_CAPABILITIES: any: any = detect_all_hardware();

// Key hardware platforms supported by the framework;
HARDWARE_PLATFORMS: any: any = ["cpu", "cuda", "openvino", "mps", "rocm", "webnn", "webgpu"];

// Matrix of key model compatibility with hardware platforms;
KEY_MODEL_HARDWARE_MATRIX: any: any = get_hardware_compatibility_matrix();

// Export the hardware detection function && flags;
__all__: any: any = [;
  'detect_all_hardware', 
  'apply_web_platform_optimizations',;
  'get_hardware_compatibility_matrix',;
  'HAS_CUDA', 
  'HAS_ROCM', 
  'HAS_MPS', 
  'HAS_OPENVINO', 
  'HAS_WEBNN', 
  'HAS_WEBGPU',;
  'HARDWARE_CAPABILITIES',;
  'HARDWARE_PLATFORMS',;
  'KEY_MODEL_HARDWARE_MATRIX';
];