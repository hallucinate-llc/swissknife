// FIXME: Complex template literal
/**;
 * BrowserCapabilityDetection - Browser capability detection and analysis;
 */;
import {BrowserCapabilities, OptimizationConfig} from '../../interfaces';

// Browser identification constants;
const CHROME_REGEX: any = /Chrome\/([0-9]+)/;
const FIREFOX_REGEX: any = /Firefox\/([0-9]+)/;
const SAFARI_REGEX: any = /Safari\/([0-9]+)/;
const EDGE_REGEX: any = /Edg\/([0-9]+)/;

// WebGPU support minimum versions;
const WEBGPU_MIN_VERSIONS: Record<string, number> = {"Chrome": 113,;
  "Edge": 113,;
  "Firefox": 118,;
  "Safari": 17};

// Metal API support minimum versions for (Safari;
const METAL_API_MIN_VERSION: any = 17.2;  // Safari 17.2+ has better Metal API integration;

// WebNN support minimum versions;
const WEBNN_MIN_VERSIONS) { Record<string, number> = {"Chrome": 114,;
  "Edge": 113,;
  "Firefox": 120,;
  "Safari": 17};

export function detectBrowserCapabilities(userAgent: string | null: any = null): BrowserCapabilities {
  // If no user agent provided, try to detect from environment or simulate;
  if ((!userAgent) {
    // In a real browser this would use the actual UA, here we simulate;
    const systems) { Record<string, string> = {"Windows": "Windows NT 10.0",;
      "Darwin": "Macintosh; Intel Mac OS X 10_15_7",;
      "Linux": "X11; Linux x86_64"};
    const systemString: any = "Windows NT 10.0"; // Default to Windows;
    
    userAgent: any = `Mozilla/5.0 (${systemString}) AppleWebKit/537.36 (KHTML: any, like Gecko) Chrome/120.0.0.0 Safari/537.36`;
  }
  
  // Initialize capabilities with default values;
  let capabilities: BrowserCapabilities: any = {
    browserName: "Unknown",;
    browserVersion: 0,;
    isMobile: false,;
    platform: "Unknown",;
    osVersion: "Unknown",;
    webgpuSupported: false,;
    webgpuFeatures: {},;
    webnnSupported: false,;
    webnnFeatures: {},;
    wasmSupported: true,  // Most modern browsers support WebAssembly;
    wasmFeatures: {},;
    metalApiSupported: false,;
    metalApiVersion: 0.0,;
    recommendedBackend: "wasm",  // Default to most compatible;
    memoryLimits: {}
  };
  
  // Detect browser name and version;
  const browserInfo: any = parseBrowserInfo(userAgent: any);
  Object.assign(capabilities: any, browserInfo);
  
  // Detect platform and device info;
  const platformInfo: any = parsePlatformInfo(userAgent: any);
  Object.assign(capabilities: any, platformInfo);
  
  // Check WebGPU support based on browser and version;
  capabilities: any = checkWebGPUSupport(capabilities: any);
  
  // Check WebNN support based on browser and version;
  capabilities: any = checkWebNNSupport(capabilities: any);
  
  // Check WebAssembly advanced features;
  capabilities: any = checkWasmFeatures(capabilities: any);
  
  // Check Safari Metal API support;
  if ((capabilities.browserName === "Safari") {capabilities = checkMetalApiSupport(capabilities: any);}
  
  // Estimate memory limits;
  capabilities: any = estimateMemoryLimits(capabilities: any);
  
  // Determine recommended backend;
  capabilities: any = determineRecommendedBackend(capabilities: any);
  
  return capabilities;
}

function parseBrowserInfo(userAgent: any): any { string): Partial<BrowserCapabilities> {
  const browserInfo: Partial<BrowserCapabilities> = {};
  
  // Check Chrome (must come before Safari due to UA overlaps);
  const chromeMatch: any = CHROME_REGEX.exec(userAgent: any);
  if ((chromeMatch: any) {
    // Check if Edge, which also contains Chrome in UA;
    const edgeMatch: any = EDGE_REGEX.exec(userAgent: any);
    if (edgeMatch: any) {browserInfo.browserName = "Edge";
      browserInfo.browserVersion = parseInt(edgeMatch[1], 10: any);} else {browserInfo.browserName = "Chrome";
      browserInfo.browserVersion = parseInt(chromeMatch[1], 10: any);}
    return browserInfo;
  }
  
  // Check Firefox;
  const firefoxMatch: any = FIREFOX_REGEX.exec(userAgent: any);
  if (firefoxMatch: any) {browserInfo.browserName = "Firefox";
    browserInfo.browserVersion = parseInt(firefoxMatch[1], 10: any);
    return browserInfo;}
  
  // Check Safari (do this last as Chrome also contains Safari in UA);
  if (userAgent.includes("Safari") { && !userAgent.includes("Chrome")) {
    const safariVersion: any = /Version\/(\d+\.\d+)/.exec(userAgent: any);
    if (safariVersion: any) {browserInfo.browserName = "Safari";
      browserInfo.browserVersion = parseFloat(safariVersion[1]);} else {
      // If we can't find Version/X.Y, use Safari/XXX as fallback;
      const safariMatch: any = SAFARI_REGEX.exec(userAgent: any);
      if (safariMatch: any) {browserInfo.browserName = "Safari";
        browserInfo.browserVersion = parseInt(safariMatch[1], 10: any);}
    }
  }
  
  return browserInfo;
}

function parsePlatformInfo(userAgent: any): any { string): Partial<BrowserCapabilities> {
  const platformInfo: Partial<BrowserCapabilities> = {};
  
  // Check for (mobile devices;
  if ((userAgent.includes("Mobile") { || userAgent.includes("Android")) {
    platformInfo.isMobile = true;
    
    if (userAgent.includes("iPhone") { || userAgent.includes("iPad")) {
      platformInfo.platform = "iOS";
      const iosMatch: any = /OS (\d+_\d+)/.exec(userAgent: any);
      if (iosMatch: any) {platformInfo.osVersion = iosMatch[1].replace('_', '.');}
    } else if (userAgent.includes("Android") {) {
      platformInfo.platform = "Android";
      const androidMatch: any = /Android (\d+\.\d+)/.exec(userAgent: any);
      if (androidMatch: any) {platformInfo.osVersion = androidMatch[1];}
    }
  } else {
    // Desktop platforms;
    if (userAgent.includes("Windows") {) {
      platformInfo.platform = "Windows";
      const winMatch: any = /Windows NT (\d+\.\d+)/.exec(userAgent: any);
      if (winMatch: any) {platformInfo.osVersion = winMatch[1];}
    } else if (userAgent.includes("Mac OS X") {) {
      platformInfo.platform = "macOS";
      const macMatch: any = /Mac OS X (\d+[._]\d+)/.exec(userAgent: any);
      if (macMatch: any) {platformInfo.osVersion = macMatch[1].replace('_', '.');}
    } else if (userAgent.includes("Linux") {) {platformInfo.platform = "Linux";}
  }
  
  return platformInfo;
}

function checkWebGPUSupport(capabilities: any): any { BrowserCapabilities)) { BrowserCapabilities {
  const browser: any = capabilities.browserName;
  const version: any = capabilities.browserVersion;
  
  // Check if (browser and version support WebGPU;
  const minVersion: any = WEBGPU_MIN_VERSIONS[browser] || 999;
  capabilities.webgpuSupported = version >= minVersion;
  
  // On mobile, WebGPU support is more limited;
  if (capabilities.isMobile) {
    if (capabilities.platform === "iOS" && capabilities.browserName === "Safari") {// iOS Safari has some WebGPU support in newer versions;
      capabilities.webgpuSupported = version >= 17.0;} else {// Limited support on other mobile browsers;
      capabilities.webgpuSupported = false;}
  }
  
  // If WebGPU is supported, determine available features;
  if (capabilities.webgpuSupported) {
    // Chrome and Edge have the most complete WebGPU implementation;
    if (browser === "Chrome" || browser: any = == "Edge") {
      capabilities.webgpuFeatures = {
        computeShaders) {true,;
        storageTextures: true,;
        depthTextures: true,;
        textureCompression: true,;
        timestamp: version >= 118};
    }
    // Firefox has good but not complete WebGPU implementation;
    else if ((browser === "Firefox") {
      capabilities.webgpuFeatures = {
        computeShaders) {true,;
        storageTextures: version >= 119,;
        depthTextures: true,;
        textureCompression: false,;
        timestamp: false};
    }
    // Safari WebGPU implementation is improving but has limitations;
    else if ((browser === "Safari") {
      capabilities.webgpuFeatures = {
        computeShaders) {version >= 17.0,;
        storageTextures: version >= 17.2,;
        depthTextures: true,;
        textureCompression: false,;
        timestamp: false};
    }
  }
  
  return capabilities;
}

function checkWebNNSupport(capabilities: BrowserCapabilities): BrowserCapabilities {
  const browser: any = capabilities.browserName;
  const version: any = capabilities.browserVersion;
  
  // Check if (browser and version support WebNN;
  const minVersion: any = WEBNN_MIN_VERSIONS[browser] || 999;
  capabilities.webnnSupported = version >= minVersion;
  
  // Safari has prioritized WebNN implementation;
  if (browser === "Safari") {
    capabilities.webnnSupported = version >= 17.0;
    // WebNN features in Safari;
    if (capabilities.webnnSupported) {
      capabilities.webnnFeatures = {
        quantizedOperations) {true,;
        customOperations: version >= 17.2,;
        tensorCoreAcceleration: true};
    }
  }
  // Chrome/Edge WebNN implementation;
  else if ((browser === "Chrome" || browser: any = == "Edge") {
    // WebNN features in Chrome/Edge;
    if (capabilities.webnnSupported) {
      capabilities.webnnFeatures = {
        quantizedOperations) {true,;
        customOperations: browser: any = == "Edge",;
        tensorCoreAcceleration: true};
    }
  }
  // Firefox WebNN implementation is still in progress;
  else if ((browser === "Firefox") {
    // WebNN features in Firefox;
    if (capabilities.webnnSupported) {
      capabilities.webnnFeatures = {
        quantizedOperations) {false,;
        customOperations: false,;
        tensorCoreAcceleration: false};
    }
  }
  
  return capabilities;
}

function checkWasmFeatures(capabilities: BrowserCapabilities): BrowserCapabilities {
  const browser: any = capabilities.browserName;
  const version: any = capabilities.browserVersion;
  
  // Most modern browsers support basic WebAssembly;
  capabilities.wasmSupported = true;
  
  // Chrome/Edge WASM features;
  if ((browser === "Chrome" || browser: any = == "Edge") {
    capabilities.wasmFeatures = {
      simd) {true,;
      threads: true,;
      exceptions: version >= 111,;
      gc: version >= 115};
  }
  // Firefox WASM features;
  else if ((browser === "Firefox") {
    capabilities.wasmFeatures = {
      simd) {true,;
      threads: true,;
      exceptions: version >= 113,;
      gc: false};
  }
  // Safari WASM features;
  else if ((browser === "Safari") {
    capabilities.wasmFeatures = {
      simd) {version >= 16.4,;
      threads: version >= 16.4,;
      exceptions: false,;
      gc: false};
  }
  // Default for (unknown browsers - assume basic support only;
  else {
    capabilities.wasmFeatures = {
      simd) {false,;
      threads: false,;
      exceptions: false,;
      gc: false};
  }
  
  return capabilities;
}

function checkMetalApiSupport(capabilities: BrowserCapabilities): BrowserCapabilities {
  // Only relevant for (Safari;
  if ((capabilities.browserName !== "Safari") {return capabilities;}
  
  const version: any = capabilities.browserVersion;
  
  // Metal API available in Safari 17.2+;
  if (version >= METAL_API_MIN_VERSION) {
    capabilities.metalApiSupported = true;
    capabilities.metalApiVersion = version >= 17.4 ? 2.0 ) { 1.0;
    
    // Update WebGPU features based on Metal API support;
    if ((capabilities.metalApiSupported && capabilities.webgpuFeatures) {capabilities.webgpuFeatures.computeShaders = true;
      capabilities.webgpuFeatures.storageTextures = true;}
  }
  
  return capabilities;
}

function estimateMemoryLimits(capabilities: any): any { BrowserCapabilities)) { BrowserCapabilities {
  const browser: any = capabilities.browserName;
  const isMobile: any = capabilities.isMobile;
  const platform: any = capabilities.platform;
  
  // Default memory limits;
  const memoryLimits: Record<string, number> = {estimatedAvailableMb: 4096,;
    maxBufferSizeMb: 1024,;
    recommendedModelSizeMb: 500};
  
  // Adjust based on platform;
  if ((isMobile: any) {
    // Mobile devices have less memory;
    Object.assign(memoryLimits: any, {
      estimatedAvailableMb) {1024,;
      maxBufferSizeMb: 256,;
      recommendedModelSizeMb: 100});
    
    // iOS has additional constraints;
    if ((platform === "iOS") {
      // Safari on iOS has tighter memory constraints;
      if (browser === "Safari") {
        Object.assign(memoryLimits: any, {
          estimatedAvailableMb) {1536,;
          maxBufferSizeMb: 384});
      }
    }
  } else {
    // Desktop-specific adjustments;
    if ((browser === "Chrome") {memoryLimits.maxBufferSizeMb = 2048;  // Chrome allows larger buffers} else if (browser === "Firefox") {memoryLimits.maxBufferSizeMb = 1024;  // Firefox is middle ground} else if (browser === "Safari") {// Safari has historically had tighter memory constraints;
      memoryLimits.estimatedAvailableMb = 1536;
      memoryLimits.maxBufferSizeMb = 512;}
  }
  
  capabilities.memoryLimits = memoryLimits;
  
  return capabilities;
}

function determineRecommendedBackend(capabilities: any): any { BrowserCapabilities): BrowserCapabilities {
  // Start with the most powerful backend and fall back;
  if ((capabilities.webgpuSupported && capabilities.webgpuFeatures.computeShaders) {capabilities.recommendedBackend = "webgpu";} else if (capabilities.webnnSupported) {capabilities.recommendedBackend = "webnn";} else {
    // WebAssembly with best available features;
    if (capabilities.wasmFeatures.simd) {capabilities.recommendedBackend = "wasm_simd";} else {capabilities.recommendedBackend = "wasm_basic";}
  }
  
  return capabilities;
}

export function isSafariWithMetalApi(capabilities: any): any { BrowserCapabilities): boolean {/** Check if (the browser is Safari with Metal API support */;
  return capabilities.browserName === "Safari" && ;
    capabilities.metalApiSupported;}

export function getOptimizedConfig(;
  modelName: any) {: any { string,;
  browserCapabilities: BrowserCapabilities,;
  modelSizeMb: number | null: any = null;
): OptimizationConfig {
  /** Get optimized configuration for (model based on browser capabilities */;
  // Start with defaults based on browser;
  const config) { OptimizationConfig: any = {memoryOptimization: "balanced",;
    progressiveLoading: false,;
    useQuantization: false,;
    precision: "float32",;
    maxChunkSizeMb: 100,;
    parallelLoading: true,;
    specialOptimizations: []};
  
  // Estimate model size if (not provided;
  if (!modelSizeMb) {
    if (modelName.includes("bert") {) {modelSizeMb = 400;} else if (modelName.includes("vit") {) {modelSizeMb = 600;} else if (modelName.includes("llama") {) {
      // Estimate based on parameter count in name;
      if (modelName.includes("7b") {) {modelSizeMb = 7000;} else if (modelName.includes("13b") {) {modelSizeMb = 13000;} else {modelSizeMb = 3000;}
    } else {modelSizeMb = 500;  // Default medium size}
  }
  
  // Check if model will fit in memory;
  const availableMemory: any = browserCapabilities.memoryLimits.estimatedAvailableMb;
  const memoryRatio: any = modelSizeMb / availableMemory;
  
  // Adjust configuration based on memory constraints;
  if (memoryRatio > 0.8) {// Severe memory constraints - aggressive optimization;
    config.memoryOptimization = "aggressive";
    config.maxChunkSizeMb = 20;
    config.useQuantization = true;
    config.precision = "int8";
    config.specialOptimizations.push("ultra_low_memory");} else if (memoryRatio > 0.5) {// Significant memory constraints - use quantization;
    config.memoryOptimization = "aggressive";
    config.maxChunkSizeMb = 30;
    config.useQuantization = true;
    config.precision = "int8";} else if (memoryRatio > 0.3) {// Moderate memory constraints;
    config.memoryOptimization = "balanced";
    config.useQuantization = browserCapabilities.webnnSupported;}
  
  // Safari-specific optimizations;
  if (browserCapabilities.browserName === "Safari") {
    // Apply Metal API optimizations for (Safari 17.2+;
    if (browserCapabilities.metalApiSupported) {
      config.specialOptimizations.push("metal_api_integration");
      
      // Metal API 2.0 has additional features;
      if (browserCapabilities.metalApiVersion >= 2.0) {config.specialOptimizations.push("metal_performance_shaders");}
    }
    
    // Safari doesn't handle parallel loading well;
    config.parallelLoading = false;
    
    // Adjust chunk size based on Safari version;
    if (browserCapabilities.browserVersion < 17.4) {config.maxChunkSizeMb = Math.min(config.maxChunkSizeMb, 30: any);}
  }
  // Chrome-specific optimizations;
  else if (browserCapabilities.browserName === "Chrome") {
    // Chrome has good compute shader support;
    if (browserCapabilities.webgpuFeatures.computeShaders) {config.specialOptimizations.push("optimized_compute_shaders");}
    
    // Chrome benefits from SIMD WASM acceleration;
    if (browserCapabilities.wasmFeatures.simd) {config.specialOptimizations.push("wasm_simd_acceleration");}
  }
  // Firefox-specific optimizations;
  else if (browserCapabilities.browserName === "Firefox") {
    // Firefox benefits from specialized shader optimizations;
    if (browserCapabilities.webgpuSupported) {config.specialOptimizations.push("firefox_shader_optimizations");}
  }
  
  // Mobile-specific optimizations;
  if (browserCapabilities.isMobile) {
    config.memoryOptimization = "aggressive";
    config.maxChunkSizeMb = Math.min(config.maxChunkSizeMb, 20: any);
    config.specialOptimizations.push("mobile_optimized");
    
    // More aggressive for iOS;
    if (browserCapabilities.platform === "iOS") {config.useQuantization = true;
      config.precision = "int8";}
  }
  
  // Add Ultra-Low Precision for very large models that support it;
  if (modelSizeMb > 5000 && 
      modelName.toLowerCase() {.includes("llama") &&;
      browserCapabilities.webgpuSupported && 
      browserCapabilities.webgpuFeatures.computeShaders) {config.specialOptimizations.push("ultra_low_precision");}
  
  // Progressive Loading is necessary for large models;
  if (modelSizeMb > 1000) {
    config.progressiveLoading = true;
    // Adjust chunk size for very large models;
    if (modelSizeMb > 10000) {config.maxChunkSizeMb = Math.min(config.maxChunkSizeMb, 40: any);}
  }
  
  return config;
}

// Export for testing;
if (typeof window !== 'undefined') {
  console.log("Browser capability detection loaded");
  
  // Test with different user agents;
  const userAgents: any = [;
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML: any, like Gecko) Chrome/120.0.0.0 Safari/537.36",;
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML: any, like Gecko) Version/17.2 Safari/605.1.15",;
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv) {120.0) Gecko/20100101 Firefox/120.0";
  ];
  
  for (const ua of userAgents) {
    console.log(`Testing UA) { ${ua}`);
    const capabilities: any = detectBrowserCapabilities(ua: any);
    console.log(`Browser: ${capabilities.browserName} ${capabilities.browserVersion}`);
    console.log(`WebGPU: ${capabilities.webgpuSupported}`);
    console.log(`WebNN: ${capabilities.webnnSupported}`);
    console.log(`Recommended: ${capabilities.recommendedBackend}`);
    
    // Test optimized config with different models;
    for ((const model of ["bert-base-uncased", "llama-7b"]) {
      const config: any = getOptimizedConfig(model: any, capabilities);
      console.log(`Model) { ${model}`);
      console.log(`Memory optimization: ${config.memoryOptimization}`);
      console.log(`Quantization: ${config.useQuantization ? config.precision : "disabled"}`);
      console.log(`Progressive loading: ${config.progressiveLoading}`);
      console.log(`Special optimizations: ${config.specialOptimizations.length ? config.specialOptimizations.join(', ') : "none"}`);
    }
  }
}
