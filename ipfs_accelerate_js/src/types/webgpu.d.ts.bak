/**
 * WebGPU type definitions
 */

export interface GPUDevice {
  createBuffer(descriptor: GPUBufferDescriptor): GPUBuffer;
  createTexture(descriptor: any): GPUTexture;
  createShaderModule(descriptor: GPUShaderModuleDescriptor): GPUShaderModule;
  createComputePipeline(descriptor: GPUComputePipelineDescriptor): GPUComputePipeline;
  createBindGroup(descriptor: GPUBindGroupDescriptor): GPUBindGroup;
  createCommandEncoder(): GPUCommandEncoder;
  queue: GPUQueue;
}

export interface GPUAdapter {
  requestDevice(): Promise<GPUDevice>;
}

export interface GPUBuffer {
  setSubData(offset: number, data: ArrayBuffer | ArrayBufferView): void;
  mapAsync(mode: number): Promise<void>;
  getMappedRange(): ArrayBuffer;
  unmap(): void;
}

export interface GPUTexture {
  createView(descriptor?: any): GPUTextureView;
}

export interface GPUTextureView {}

export interface GPUShaderModule {}

export interface GPUShaderModuleDescriptor {
  code: string;
}

export interface GPUComputePipeline {}

export interface GPUComputePipelineDescriptor {
  layout?: any;
  compute: {
    module: GPUShaderModule;
    entryPoint: string;
  };
}

export interface GPUBindGroup {}

export interface GPUBindGroupDescriptor {
  layout: any;
  entries: GPUBindGroupEntry[];
}

export interface GPUBindGroupEntry {
  binding: number;
  resource: any;
}

export interface GPUCommandEncoder {
  beginComputePass(): GPUComputePassEncoder;
  finish(): GPUCommandBuffer;
}

export interface GPUComputePassEncoder {
  setPipeline(pipeline: GPUComputePipeline): void;
  setBindGroup(index: number, bindGroup: GPUBindGroup): void;
  dispatchWorkgroups(x: number, y?: number, z?: number): void;
  end(): void;
}

export interface GPUCommandBuffer {}

export interface GPUQueue {
  submit(commandBuffers: GPUCommandBuffer[]): void;
}

export interface GPUBufferDescriptor {
  size: number;
  usage: number;
  mappedAtCreation?: boolean;
}

export interface GPUBufferUsage {
  COPY_SRC: number;
  COPY_DST: number;
  STORAGE: number;
  UNIFORM: number;
}

export interface NavigatorGPU {
  requestAdapter(): Promise<GPUAdapter>;
}

export interface Navigator {
  gpu: NavigatorGPU;
}
