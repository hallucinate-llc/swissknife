/**
 * WebNN type definitions
 */

export interface MLContext {}

export interface MLGraph {
  compute(inputs: Record<string, MLOperand>): Record<string, MLOperand>;
}

export interface MLOperandDescriptor {
  type: string;
  dimensions: number[];
}

export interface MLOperand {}

export interface MLGraphBuilder {
  input(name: string, desc: MLOperandDescriptor): MLOperand;
  constant(desc: MLOperandDescriptor, value: any): MLOperand;
  build(outputs: Record<string, MLOperand>): Promise<MLGraph>;
  
  // Basic operations
  add(a: MLOperand, b: MLOperand): MLOperand;
  sub(a: MLOperand, b: MLOperand): MLOperand;
  mul(a: MLOperand, b: MLOperand): MLOperand;
  div(a: MLOperand, b: MLOperand): MLOperand;
  
  // Neural network operations
  gemm(a: MLOperand, b: MLOperand, options?: any): MLOperand;
  conv2d(input: MLOperand, filter: MLOperand, options?: any): MLOperand;
  relu(input: MLOperand): MLOperand;
  softmax(input: MLOperand): MLOperand;
}

export interface NavigatorML {
  createContext(options?: any): MLContext;
  createGraphBuilder(context: MLContext): MLGraphBuilder;
}

export interface Navigator {
  ml: NavigatorML;
}
