name: Release Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      prerelease:
        description: 'Pre-release identifier (e.g., alpha, beta, rc)'
        required: false
        type: string
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      current_version: ${{ steps.version.outputs.current_version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      
      - name: Get current version
        id: current
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Determine new version
        id: version
        run: |
          CURRENT_VERSION=${{ steps.current.outputs.current_version }}
          
          # Parse version parts
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3 | cut -d- -f1)
          
          # Calculate new version based on input
          case "${{ github.event.inputs.release_type }}" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
            *)
              echo "Invalid release type"
              exit 1
              ;;
          esac
          
          # Add pre-release suffix if provided
          if [ -n "${{ github.event.inputs.prerelease }}" ]; then
            NEW_VERSION="$NEW_VERSION-${{ github.event.inputs.prerelease }}"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Show version information
        run: |
          echo "Current version: ${{ steps.version.outputs.current_version }}"
          echo "New version: ${{ steps.version.outputs.new_version }}"
          echo "Dry run: ${{ github.event.inputs.dry_run }}"

  test:
    name: Run Tests
    needs: prepare
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run build
        run: npm run build

  create-release:
    name: Create Release
    needs: [prepare, test]
    if: ${{ github.event.inputs.dry_run != 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Update version
        run: |
          npm version ${{ needs.prepare.outputs.new_version }} --no-git-tag-version
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get all commits since the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # If no tags exist, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Otherwise, get commits since the last tag
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Create changelog content
          CHANGELOG="## What's Changed\n\n$COMMITS\n\n## Full Changelog\n\n"
          
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG="${CHANGELOG}* Initial release"
          else
            CHANGELOG="${CHANGELOG}* [$LAST_TAG...v${{ needs.prepare.outputs.new_version }}](https://github.com/${{ github.repository }}/compare/$LAST_TAG...v${{ needs.prepare.outputs.new_version }})"
          fi
          
          # Save changelog to a file
          echo -e "$CHANGELOG" > changelog.md
          
          # Set output
          EOF=$(openssl rand -hex 8)
          echo "changelog<<$EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
      
      - name: Commit changes
        run: |
          git add package.json package-lock.json
          git commit -m "chore(release): v${{ needs.prepare.outputs.new_version }}"
          git tag -a "v${{ needs.prepare.outputs.new_version }}" -m "Release v${{ needs.prepare.outputs.new_version }}"
          git push origin
          git push origin --tags
      
      - name: Build project
        run: npm run build
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare.outputs.new_version }}
          release_name: Release v${{ needs.prepare.outputs.new_version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease != '' }}
      
      - name: Upload build artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cli.mjs
          asset_name: cli.mjs
          asset_content_type: application/javascript
      
      - name: Upload yoga.wasm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./yoga.wasm
          asset_name: yoga.wasm
          asset_content_type: application/wasm

  publish-npm:
    name: Publish to npm
    needs: [prepare, create-release]
    if: ${{ github.event.inputs.dry_run != 'true' && github.event.inputs.prerelease == '' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: v${{ needs.prepare.outputs.new_version }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}