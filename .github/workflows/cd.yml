name: SwissKnife CD (Deployment)

on:
  workflow_run:
    workflows: ["SwissKnife CI"]
    branches: [main, master]
    types: [completed]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - standard
          - blue-green
          - canary

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' || github.event_name == 'release' }}
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      environment: ${{ steps.set-environment.outputs.environment }}
      strategy: ${{ steps.set-strategy.outputs.strategy }}
    
    steps:
      - name: Determine environment
        id: set-environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Determine version
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi
      
      - name: Determine deployment strategy
        id: set-strategy
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "strategy=${{ github.event.inputs.deployment_strategy }}" >> $GITHUB_OUTPUT
          else
            echo "strategy=blue-green" >> $GITHUB_OUTPUT
          fi
      
      - name: Echo deployment parameters
        run: |
          echo "Deploying to: ${{ steps.set-environment.outputs.environment }}"
          echo "Version: ${{ steps.set-version.outputs.version }}"
          echo "Strategy: ${{ steps.set-strategy.outputs.strategy }}"

  deploy-staging:
    name: Deploy to Staging
    needs: prepare
    if: needs.prepare.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .
        continue-on-error: true
      
      - name: Build if artifacts unavailable
        if: ${{ steps.download.outcome == 'failure' }}
        run: npm run build
      
      - name: Configure staging environment
        run: npm run config:staging
        env:
          NODE_ENV: staging
          STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
          STAGING_API_KEY: ${{ secrets.STAGING_API_KEY }}
      
      - name: Deploy to staging
        run: |
          if [[ "${{ needs.prepare.outputs.strategy }}" == "blue-green" ]]; then
            node deploy/blue-green/blue-green.js deploy staging
          else
            npm run deploy:staging
          fi
        env:
          STAGING_DEPLOY_TOKEN: ${{ secrets.STAGING_DEPLOY_TOKEN }}
      
      - name: Run post-deployment tests
        run: npm run test:staging
        continue-on-error: true
      
      - name: Notify deployment status
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Staging Deployment ${{ job.status }}\nVersion: ${{ needs.prepare.outputs.version }}\nStrategy: ${{ needs.prepare.outputs.strategy }}\nWorkflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        if: always()

  deploy-production:
    name: Deploy to Production
    needs: prepare
    if: needs.prepare.outputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: .
        continue-on-error: true
      
      - name: Build if artifacts unavailable
        if: ${{ steps.download.outcome == 'failure' }}
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Configure production environment
        run: npm run config:production
        env:
          NODE_ENV: production
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          PRODUCTION_API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
      
      - name: Deploy to production with selected strategy
        id: deploy
        run: |
          STRATEGY="${{ needs.prepare.outputs.strategy }}"
          echo "Using deployment strategy: $STRATEGY"
          
          if [[ "$STRATEGY" == "blue-green" ]]; then
            # Use blue-green deployment
            node deploy/blue-green/blue-green.js deploy production
            echo "deployment_type=blue-green" >> $GITHUB_OUTPUT
            ACTIVE_ENV=$(node deploy/blue-green/blue-green.js current | grep -o 'blue\|green')
            echo "active_environment=$ACTIVE_ENV" >> $GITHUB_OUTPUT
          elif [[ "$STRATEGY" == "canary" ]]; then
            # Use canary deployment (10% traffic initially)
            mkdir -p deploy/canary
            echo "Performing canary deployment (simulated)"
            # In a real implementation, this would configure traffic splitting
            echo "Routing 10% of traffic to new version"
            sleep 5
            echo "deployment_type=canary" >> $GITHUB_OUTPUT
            echo "canary_percentage=10" >> $GITHUB_OUTPUT
          else
            # Use standard deployment
            npm run deploy:production
            echo "deployment_type=standard" >> $GITHUB_OUTPUT
          fi
        env:
          PRODUCTION_DEPLOY_TOKEN: ${{ secrets.PRODUCTION_DEPLOY_TOKEN }}

      - name: Validate deployment
        run: |
          echo "Validating deployment..."
          
          DEPLOYMENT_TYPE="${{ steps.deploy.outputs.deployment_type }}"
          
          if [[ "$DEPLOYMENT_TYPE" == "blue-green" ]]; then
            ACTIVE_ENV="${{ steps.deploy.outputs.active_environment }}"
            echo "Active environment: $ACTIVE_ENV"
            # Perform additional validation for blue-green deployment
          elif [[ "$DEPLOYMENT_TYPE" == "canary" ]]; then
            CANARY_PERCENTAGE="${{ steps.deploy.outputs.canary_percentage }}"
            echo "Canary deployment percentage: $CANARY_PERCENTAGE%"
            # Validate canary deployment and gradually increase percentage if metrics are good
            echo "Monitoring canary deployment metrics..."
            sleep 5
            echo "Canary metrics look good, increasing to 50%"
            sleep 5
            echo "Metrics still good, completing deployment to 100%"
          else
            # Standard deployment validation
            echo "Standard deployment complete"
          fi
      
      - name: Create deployment record
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          initial-status: success
          description: "Version ${{ needs.prepare.outputs.version }} deployed to production using ${{ steps.deploy.outputs.deployment_type }} strategy"
      
      - name: Notify deployment status
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "ðŸš€ Production Deployment ${{ job.status }}\nVersion: ${{ needs.prepare.outputs.version }}\nStrategy: ${{ steps.deploy.outputs.deployment_type }}\nWorkflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        if: always()

  publish-npm:
    name: Publish to npm
    needs: [prepare, deploy-production]
    if: needs.prepare.outputs.environment == 'production' && success()
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Set version
        if: needs.prepare.outputs.version != 'latest'
        run: npm version ${{ needs.prepare.outputs.version }} --no-git-tag-version
      
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}